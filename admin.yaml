swagger: '2.0'
info:
  description: >-
    The UKC Administration API allows managing 'Unbound key control'
    configuration and objects.

    __This API is in draft status and is currently being reviewed__


    # Authentication

    Most UKC API operations require an authorization context and user
    permissions. Users are identified by an authentication token attached to the
    request headers.

    ## Basic Authentication

    UKC supports the basic authentication scheme. The "Basic" HTTP authentication scheme is defined in 
    RFC 7617, which transmits credentials as user/password pairs, encoded using base64 in the
    HTTP Authorization header.


    The user ID can include the required partition in the format:
    
    `username@partitionId:password`

    ## Authentication Token

    The system can authenticate the user with a generated authentication token,
    which is valid for a limited time. This token eliminates the need to transmit the 
    username/password on every request. See `GET /authToken` for more
    information.

    ## Authentication Failure (unauthorized)

    If an operation is unauthorized, an HTTP 401 status code is returned
    with the `WWW-Authenticate` header.

    # Partitioning

    UKC objects are organized into partitions. Partitioning allows namespacing
    and access control to objects by configuring users with roles per partition.

    
    The objects contained in a partition are: 
    
    Users, Clients, Keys, Certificates, Secrets and other partitions

    ## Permissions

    Any partition can have many users who can access its objects.

    A partition user can have one of two security roles:
    
    - **so** - Security Officer. Can perform all operations on the partition objects including administration: adding, modifying and deleting objects.
    
    - **user** - Can only perform cryptographic operations with the partition objects, such as sign and verify, and can also edit keys, certificates and secrets.
    
    ## Root Partition

    The default built-in partition for an UKC cluster is called `root` and is
    created automatically when setting up a new UKC cluster.

    ## Partition Hierarchy

    - __Parent partition__ - Any partition, _except_ the root partition, has one parent partition.
    
    - __Permissions inheritance__ - User access permissions can be configured to be _inherited_ from the parent partition. For example, a user `userA`, which is an SO on `partitionA`, would also have SO permissions on `partitionB` if `partitionB` is child of `partitionA`.
      __Note:__ By default, access permissions are not inherited from the parent partition. To use permission inheritance, it should be configured explicitly.
      
    ## Default Partition Context

    For every request the _default partition_ is the home partition of the connected user.


    For example:
      - `so@partitionA` - the default partition is `partitionA`.
      - `user@partitionA.partitionB` - the default partition is `partitionB`, which is a child of `partitionA`.
      - `so@partitionB` - the default partition is `partitionB`, which is child of the root partition.
      
    ## Object Path

    - A UKC object, such as User or Key, can be referenced by its unique object
    path, which may be absolute or relative to the default partition.

    - The object path is unique per object type. Therefore, within one partition there
    can be two objects represented by the same path, one is a key and one is a user.

    - UKC object path is composed of a series of path components separated by the dot character (`.`).

    - A path component may represent a partition name or object name.
      - The last component in a path is an object name.
    - An absolute path starts with the tilde character `~` which represents the root partition.
      - For example, to delete a key named `keyA` that is contained in a partition `partitionC`:
      `DELETE https://myukcserver.com/keys/~.partitionC.keyA`
    - A relative path uses the current default partition as the root of the specified path. 
      - If a user is logged in as `so@partitionC`, he can perform the same delete action as in the previous example with:
      `DELETE https://myukcserver.com/keys/keyA`.
      - If the user is logged in as `so@root`, he can use the following as its relative to the root partition:
      `DELETE https://myukcserver.com/keys/partitionC.keyA` 
      
    # Object IDs

    Many operations require an object ID as part of the resource URI. Object ids can be one of:

    - An object __UUID__ where applicable. This ID is a server generated ID, which
    is unique per object type.
      - __Note:__ Objects of different types can have the same UUID. For example, user A and key A. That is due to the fact that UUIDs are unique only per object type.
    - An object relative or absolute path as specified above.

    # Common Errors

    Any API call can result in one of the following general HTTP codes:

    - 500 - General server error.

    - 404 - Resource not found. Verify that the URL exists.

    - 401 - Unauthorized
  version: 2.0.1806
  title: UKC Admin API
  termsOfService: ''
  contact: {}
tags:
  - name: Authentication
  - name: Clients
  - name: General
  - name: Jobs
  - name: Partitions
  - name: System
  - name: Users
schemes:
  - https
paths:
  /api/v1/authToken:
    get:
      tags:
        - Authentication
      summary: >-
        Returns an authentication token that can be used in future calls for authentication
      description: The user credentials are provided in the HTTP headers
      operationId: getAuthToken
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Token'
        '401':
          description: >-
            Authentication failure, the system could not verify the
            User/Password passed in the request header
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/ca.cer:
    get:
      tags:
        - General
      summary: Return UKC root CA certificate
      description: Download the root CA certificate of UKC
      operationId: getCaCert
      produces:
        - application/x-x509-ca-cert
        - application/json
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: file
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/clients:
    get:
      tags:
        - Clients
      summary: List clients
      description: Return a list of clients
      operationId: listClients
      produces:
        - application/json
      parameters:
        - name: partitionId
          in: query
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Client'
      security:
        - basicAuth: []
        - Authorization: []
    post:
      tags:
        - Clients
      summary: Creates a new client and returns its activation code
      description: ''
      operationId: createClient
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: New Client
          required: false
          schema:
            $ref: '#/definitions/NewClient'
        - name: partitionId
          in: query
          description: Partition ID
          required: false
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ActivationCode'
        '201':
          description: New client created successfully
          schema:
            $ref: '#/definitions/ActivationCode'
        '202':
          description: ACCEPTED
          schema:
            $ref: '#/definitions/Job'
        '409':
          description: Object already exists
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/clients/with-cert:
    post:
      tags:
        - Clients
      summary: Creates a new client and returns its certificate
      description: ''
      operationId: createClientWithCertificate
      consumes:
        - application/json
      produces:
        - application/json
        - application/x-pkcs12
        - application/x-x509-user-cert
      parameters:
        - in: body
          name: body
          description: New Client
          required: false
          schema:
            $ref: '#/definitions/NewClientWithCertificate'
        - name: partitionId
          in: query
          description: Partition ID
          required: false
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            type: file
        '201':
          description: New client created successfully
        '202':
          description: ACCEPTED
        '409':
          description: Object already exists
      security:
        - basicAuth: []
        - Authorization: []
  '/api/v1/clients/{clientId}':
    get:
      tags:
        - Clients
      summary: Get details of an existing client
      description: Return details of a client
      operationId: getClient
      produces:
        - application/json
      parameters:
        - name: clientId
          in: path
          description: Client ID
          required: true
          type: string
        - name: partitionId
          in: query
          description: Partition ID
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Client'
      security:
        - basicAuth: []
        - Authorization: []
    delete:
      tags:
        - Clients
      summary: Deletes a client
      description: Delete provided client
      operationId: deleteClient
      produces:
        - application/json
      parameters:
        - name: clientId
          in: path
          description: Client ID
          required: true
          type: string
        - name: partitionId
          in: query
          description: Partition ID
          required: false
          type: string
      responses:
        '200':
          description: Client deleted successfully.
        '202':
          description: ACCEPTED
          schema:
            $ref: '#/definitions/Job'
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/health:
    get:
      tags:
        - General
      summary: Check if the UKC server is alive and functioning properly
      description: >-
        Return health status of the system, determines if it is usable, as long
        as http return code is OK, system is usable
      operationId: getHealth
      parameters: []
      responses:
        '200':
          description: OK
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/info:
    get:
      tags:
        - General
      summary: Return system information
      description: >-
        Including version and supported capabilities. If authentication is
        provided, returns also the allowed operations.
      operationId: getSystemInfo
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SystemInfo'
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/jobs/my/status:
    get:
      tags:
        - Jobs
      summary: Get status of pending quorum requests
      description: ''
      operationId: getQuorumStatus
      produces:
        - application/json
      parameters:
        - name: partitionId
          in: query
          description: Partition ID
          required: false
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/QuorumStatus'
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/jobs/quorum:
    get:
      tags:
        - Jobs
      summary: Get a list of pending quorum jobs
      description: ''
      operationId: getQuorumJobs
      produces:
        - application/json
      parameters:
        - name: partitionId
          in: query
          description: Partition ID
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Job'
      security:
        - basicAuth: []
        - Authorization: []
  '/api/v1/jobs/{jobId}':
    get:
      tags:
        - Jobs
      summary: Get job data
      description: 'Current job status and details'
      operationId: getQuorumJob
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          description: Job ID
          required: true
          type: string
        - name: partitionId
          in: query
          description: Partition ID
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Job'
      security:
        - basicAuth: []
        - Authorization: []
    delete:
      tags:
        - Jobs
      summary: Delete a job
      description: 'Cancel the job approval process and execution'
      operationId: deleteQuorumJob
      parameters:
        - name: jobId
          in: path
          description: Job ID
          required: true
          type: string
        - name: partitionId
          in: query
          description: Partition ID
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Job'
      security:
        - basicAuth: []
        - Authorization: []
  '/api/v1/jobs/{jobId}/approve':
    post:
      tags:
        - Jobs
      summary: Approve a pending quorum job
      description: ''
      operationId: approveJob
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          description: Job ID
          required: true
          type: string
        - name: partitionId
          in: query
          description: Partition ID
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Job'
      security:
        - basicAuth: []
        - Authorization: []
  '/api/v1/jobs/{jobId}/execute':
    post:
      tags:
        - Jobs
      summary: Execute an approved quorum job
      description: ''
      operationId: executeJob
      produces:
        - application/json
      parameters:
        - name: jobId
          in: path
          description: Job ID
          required: true
          type: string
        - name: partitionId
          in: query
          description: Partition ID
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Job'
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/me/password:
    put:
      tags:
        - Authentication
      summary: Change the password of the current user
      description: >-
        The current user credentials are provided in the HTTP headers. They can be
        either password or JWT token.
      operationId: changePassword
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: New and existing password
          required: false
          schema:
            $ref: '#/definitions/NewAndExistingPassword'
      responses:
        '201':
          description: Password changed successfully
        '400':
          description: New password does not comply with password policy rules
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/partitions:
    get:
      tags:
        - Partitions
      summary: Get a list of partitions
      description: 'Available for root users only'
      operationId: listPartitions
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Partition'
      security:
        - basicAuth: []
        - Authorization: []
    post:
      tags:
        - Partitions
      summary: Create a new partition
      description: >-
        Create a new logical partition. Can optionally create a default client
        certificate for the new partition.
      operationId: createPartition
      consumes:
        - application/json
      produces:
        - application/json
        - application/x-pkcs12
        - application/x-x509-user-cert
      parameters:
        - in: body
          name: body
          description: The new partition
          required: false
          schema:
            $ref: '#/definitions/NewPartition'
      responses:
        '200':
          description: Successful operation
          schema:
            type: file
        '201':
          description: >-
            Partition created successfully. If initial client was specified, the
            response includes the generated PFX in Base64 encoded DER format.
        '409':
          description: Object already exists
      security:
        - basicAuth: []
        - Authorization: []
  '/api/v1/partitions/{partitionId}':
    get:
      tags:
        - Partitions
      summary: Get partition info
      description: ''
      operationId: getPartition
      produces:
        - application/json
      parameters:
        - name: partitionId
          in: path
          description: Partition Id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Partition'
      security:
        - basicAuth: []
        - Authorization: []
    delete:
      tags:
        - Partitions
      summary: Delete a partition
      description: >-
        Deletes a partition, the partition should not contain any keys or
        clients in order to be deleted.
      operationId: deletePartition
      produces:
        - application/json
      parameters:
        - name: partitionId
          in: path
          description: >-
            The ID of the partition to delete. The partition name can be used as
            the ID.
          required: true
          type: string
      responses:
        '200':
          description: Partition deleted successfully
      security:
        - basicAuth: []
        - Authorization: []
  '/api/v1/partitions/{partitionId}/settings':
    get:
      tags:
        - Partitions
      summary: Get a list of configuration parameters for a partition
      description: Get all settings for a partition
      operationId: getPartitionSettings
      produces:
        - application/json
      parameters:
        - name: partitionId
          in: path
          description: >-
            Partition ID/name of the target partition. Can be
            \&quot;default\&quot; to use the default partition for the current
            authenticated user.
          required: true
          type: string
        - name: detailed
          in: query
          description: Detailed
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/KeyValueEntry'
      security:
        - basicAuth: []
        - Authorization: []
  '/api/v1/partitions/{partitionId}/settings/{settingKey}':
    put:
      tags:
        - Partitions
      summary: Updates one or more partition configuration parameters
      description: Use this method to change one or more settings for the partition.
      operationId: updatePartitionSetting
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: partitionId
          in: path
          required: true
          type: string
        - name: settingKey
          in: path
          required: true
          type: string
        - in: body
          name: body
          description: Setting value
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
        '202':
          description: ACCEPTED
          schema:
            $ref: '#/definitions/Job'
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/random:
    get:
      tags:
        - General
      summary: >-
        Return random bytes from the UKC server, by default returns 32 bytes,
        unless size is specified.
      description: >-
        The UKC random number generator is combined from different entropy
        sources of the different servers in the UKC cluster.
      operationId: generateRandom
      produces:
        - application/json
      parameters:
        - name: size
          in: query
          description: Size (in bytes) of random bytes to return
          required: false
          type: integer
          default: 32
          maximum: 1024
          minimum: 32
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RandomEntropyBytes'
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/random/entropy-bytes:
    put:
      tags:
        - General
      summary: Add random bytes to the UKC entropy source
      description: >-
        Different clients can add entropy to the server. Collecting entropy from
        the clients can enhance the strength of the UKC random number generator.
        This function only adds entropy, i.e. if the provided value has no
        entropy, it will not harm the generator quality.
      operationId: addRandomEntropyBytes
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Random bytes
          required: false
          schema:
            $ref: '#/definitions/RandomEntropyBytes'
      responses:
        '200':
          description: OK
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/self.cer:
    get:
      tags:
        - General
      summary: Return specific server certificate
      description: >-
        Download this specific server certificate. Used for registering new
        servers.
      operationId: selfCertGet
      produces:
        - application/x-x509-user-cert
        - application/json
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: file
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/servers/new/auxiliary:
    get:
      tags:
        - System
      summary: Get the new auxiliary server certificate
      description: ''
      operationId: getNewAuxiliary
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: host
          in: query
          description: Auxiliary host
          required: true
          type: string
        - name: port
          in: query
          description: Auxiliary port
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/NewServer'
      security:
        - basicAuth: []
        - Authorization: []
    post:
      tags:
        - System
      summary: Adds a new auxiliary server
      description: ''
      operationId: addAuxServer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: the new auxiliary
          required: false
          schema:
            $ref: '#/definitions/NewServer'
        - name: force
          in: query
          description: Force
          required: false
          type: boolean
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/NewServer'
        '201':
          description: Auxiliary server added successfully
          schema:
            $ref: '#/definitions/NewServer'
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/servers/new/pair:
    get:
      tags:
        - System
      summary: Get the new crypto server pair certificates
      description: ''
      operationId: getNewPair
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ep_host
          in: query
          description: Entry point host
          required: true
          type: string
        - name: ep_port
          in: query
          description: Entry point port
          required: false
          type: integer
          format: int32
        - name: partner_host
          in: query
          description: Partner host
          required: true
          type: string
        - name: partner_port
          in: query
          description: Partner port
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/NewPair'
      security:
        - basicAuth: []
        - Authorization: []
    post:
      tags:
        - System
      summary: Adds a new crypto server pair.
      description: ''
      operationId: addServerPair
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: New pair
          required: false
          schema:
            $ref: '#/definitions/NewPair'
        - name: force
          in: query
          description: Force
          required: false
          type: boolean
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/NewPair'
        '201':
          description: Pair added successfully
          schema:
            $ref: '#/definitions/NewPair'
      security:
        - basicAuth: []
        - Authorization: []
  '/api/v1/servers/{serverId}':
    get:
      tags:
        - System
      summary: Get detailed server information
      description: ''
      operationId: getServer
      produces:
        - application/json
      parameters:
        - name: serverId
          in: path
          description: 'The identifier of the server is it&#39;s url (escaped)'
          required: true
          type: string
        - name: detailed
          in: query
          description: Detailed
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Server'
      security:
        - basicAuth: []
        - Authorization: []
    delete:
      tags:
        - System
      summary: Remove a server or server pair from the UKC cluster
      description: >-
        Removes an Auxiliary server or server pair from UKC cluster. A server
        pair is treated as one unit, identified by the host of its EntryPoint
        server.
      operationId: deleteServer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: serverId
          in: path
          description: >-
            The identifier of the server is its URL. In case of server
            pair, this should be the host of the EntryPoint server.
          required: true
          type: string
      responses:
        '200':
          description: Server deleted
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/system/settings:
    get:
      tags:
        - System
      summary: Get UKC system configuration parameters
      description: >-
        Returns a list of key-value entries that represent the configuration
        parameters for the UKC system
      operationId: getSettings
      produces:
        - application/json
      parameters:
        - name: detailed
          in: query
          description: detailed
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/KeyValueEntry'
      security:
        - basicAuth: []
        - Authorization: []
  '/api/v1/system/settings/{settingKey}':
    put:
      tags:
        - System
      summary: Sets one or more system configuration parameters
      description: Sets the value for one or more system configuration parameters
      operationId: setSettings
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: settingKey
          in: path
          required: true
          type: string
        - in: body
          name: body
          description: Setting value
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
        '202':
          description: ACCEPTED
          schema:
            $ref: '#/definitions/Job'
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/topology:
    get:
      tags:
        - System
      summary: Return the topology in the cluster including the server status
      description: ''
      operationId: getTopology
      produces:
        - application/json
      parameters:
        - name: detailed
          in: query
          description: Detailed
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Topology'
      security:
        - basicAuth: []
        - Authorization: []
  /api/v1/users:
    get:
      tags:
        - Users
      summary: List all users in a partition
      description: Return a list of all users in a partition
      operationId: listUsers
      produces:
        - application/json
      parameters:
        - name: partitionId
          in: query
          description: Partition ID
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      security:
        - basicAuth: []
        - Authorization: []
    post:
      tags:
        - Users
      summary: Creates a new user
      description: Create a new user in a given partition
      operationId: createUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: New User
          required: false
          schema:
            $ref: '#/definitions/NewUser'
        - name: partitionId
          in: query
          description: Partition ID
          required: false
          type: string
      responses:
        '201':
          description: User created successfully
        '202':
          description: ACCEPTED
          schema:
            $ref: '#/definitions/Job'
        '409':
          description: Object already exists
      security:
        - basicAuth: []
        - Authorization: []
  '/api/v1/users/{userId}':
    get:
      tags:
        - Users
      summary: Get details of an existing user
      description: Return details of a user
      operationId: getUser
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: User ID to look for
          required: true
          type: string
        - name: partitionId
          in: query
          description: Partition ID
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
      security:
        - basicAuth: []
        - Authorization: []
    delete:
      tags:
        - Users
      summary: Deletes a user
      description: ''
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          type: string
        - name: partitionId
          in: query
          description: Partition ID
          required: false
          type: string
      responses:
        '200':
          description: User deleted successfully.
      security:
        - basicAuth: []
        - Authorization: []
  '/api/v1/users/{userId}/password':
    put:
      tags:
        - Users
      summary: Reset user password
      description: >-
        Reset user password. SO can reset it for users in his partition. Root
        parition SO can reset it for SO of other partitions.
      operationId: resetUserPassword
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Password
          required: false
          schema:
            $ref: '#/definitions/Password'
        - name: userId
          in: path
          description: User ID
          required: true
          type: string
        - name: partitionId
          in: query
          description: Partition ID
          required: false
          type: string
      responses:
        '200':
          description: User password reset successfully
        '400':
          description: New password does not comply with password policy rules
      security:
        - basicAuth: []
        - Authorization: []
securityDefinitions:
  Authorization:
    description: >-
      For accessing the API, a valid JWT token must be passed in all the queries in
      the 'Authorization' header.

      A valid JWT token is generated by the API and retourned as answer of a call
      to the route /login giving a valid user & password.

      The following syntax must be used in the 'Authorization' header:
             Bearer: xxxxxx.yyyyyyy.zzzzzz
    type: apiKey
    name: Authorization
    in: header
  basicAuth:
    type: basic
definitions:
  ActivationCode:
    type: object
    required:
      - value
    properties:
      value:
        type: string
        example: '123456'
        description: Client activation code
        minLength: 1
    description: ActivationCode
  Client:
    type: object
    properties:
      name:
        type: string
        example: client-name
        description: Client name
        readOnly: true
      partition:
        type: string
        example: ~.codeSign.developers
        readOnly: true
      activationStatus:
        type: string
        description: Client activation status
        readOnly: true
        enum:
          - ACTIVATED
          - PENDING
      activationType:
        type: string
        description: Client activation type
        readOnly: true
        enum:
          - CERTIFICATE_REQUEST
          - ACTIVATION_CODE
          - CERTIFICATE_DOWNLOAD
          - EXTERNAL
      lastUpdatedAt:
        type: string
        description: Last update time for this client record
        readOnly: true
      failedActivationCounter:
        type: integer
        format: int32
        description: Number of failed retries to use client activation code
        readOnly: true
      isActivationLocked:
        type: boolean
        readOnly: true
      checkIp:
        type: boolean
        description: Enforce client ip verification
      allowNat:
        type: boolean
        description: Allow client use NAT
    description: A UKC new client
  Job:
    type: object
    properties:
      initiator:
        type: string
        example: so@root
        readOnly: true
      id:
        type: string
        example: 389323ee-3588-416e-94bd-f93ca815762e
        readOnly: true
      title:
        type: string
        readOnly: true
      opName:
        type: string
        example: 'PARTITION_CONFIG_SET '
        readOnly: true
      createdAt:
        type: string
        readOnly: true
      expiresAt:
        type: string
        readOnly: true
      opParams:
        type: array
        readOnly: true
        items:
          $ref: '#/definitions/KeyValueEntry'
      response:
        type: string
        readOnly: true
      approvedBy:
        type: array
        readOnly: true
        items:
          type: string
      status:
        type: string
        readOnly: true
        enum:
          - PENDING_APPROVAL
          - PENDING_EXECUTION
          - DONE
          - EXPIRED
      totalRequiredApprovals:
        type: integer
        format: int32
        readOnly: true
    description: An asynchronous job
  KeyValueEntry:
    type: object
    required:
      - key
      - value
    properties:
      key:
        type: string
        minLength: 1
      value:
        type: string
      description:
        type: string
        description: quorum timeout
        readOnly: true
      type:
        type: string
        description: value type
        readOnly: true
        enum:
          - BOOLEAN
          - TEXT
          - INTEGER
          - ARRAY
          - MAP
          - CERTIFICATE
      defaultValue:
        type: string
        description: default value
        readOnly: true
      min:
        type: integer
        format: int32
        description: minimum value
        readOnly: true
      max:
        type: integer
        format: int32
        description: maximum value
        readOnly: true
      unit:
        type: string
        description: unit type
        readOnly: true
        enum:
          - SECONDS
          - MINUTES
          - HOURS
          - DAYS
    description: Key value entry
  NewAndExistingPassword:
    type: object
    required:
      - existingPassword
      - newPassword
    properties:
      existingPassword:
        type: string
        description: The existing user password
        minLength: 1
      newPassword:
        type: string
        description: The new password
        minLength: 1
    description: New And Existing Password
  NewClient:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: client-name
        description: Client name
        minLength: 1
      checkIp:
        type: boolean
        description: Enforce client ip verification
      allowNat:
        type: boolean
        description: Allow client use NAT
  NewClientWithCertificate:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: client-name
        description: Client name
        minLength: 1
      checkIp:
        type: boolean
        description: Enforce client ip verification
      allowNat:
        type: boolean
        description: Allow client use NAT
      alternativeNames:
        type: array
        example: '{client-ip,client-name}'
        description: Client alternative names
        items:
          type: string
      pfxPassword:
        type: string
        description: The new client PFX password
      csr:
        type: string
        example: |-
          MIIByjCCATMCAQAwgYkxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlh
          MRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRMwEQYDVQQKEwpHb29nbGUgSW5jMR8w
          HQYDVQQLExZJbmZvcm1hdGlvbiBUZWNobm9sb2d5MRcwFQYDVQQDEw53d3cuZ29v
          Z2xlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEApZtYJCHJ4VpVXHfV
          IlstQTlO4qC03hjX+ZkPyvdYd1Q4+qbAeTwXmCUKYHThVRd5aXSqlPzyIBwieMZr
          WFlRQddZ1IzXAlVRDWwAo60KecqeAXnnUK+5fXoTI/UgWshre8tJ+x/TMHaQKR/J
          cIWPhqaQhsJuzZbvAdGA80BLxdMCAwEAAaAAMA0GCSqGSIb3DQEBBQUAA4GBAIhl
          4PvFq+e7ipARgI5ZM+GZx6mpCz44DTo0JkwfRDf+BtrsaC0q68eTf2XhYOsq4fkH
          Q0uA0aVog3f5iJxCa3Hp5gxbJQ6zV6kJ0TEsuaaOhEko9sdpCoPOnRBm2i/XRD2D
          6iNh8f8z0ShGsFqjDgFHyF3o+lUyj+UC6H1QW7bn
        description: The new client Base64 encoded Certificate Request
  NewPair:
    type: object
    required:
      - entryPoint
      - partner
    properties:
      entryPoint:
        description: Entry Point
        $ref: '#/definitions/NewServer'
      partner:
        description: Partner
        $ref: '#/definitions/NewServer'
    description: A UKC pair
  NewPartition:
    type: object
    required:
      - name
      - newClient
      - soPassword
    properties:
      name:
        type: string
        description: The new partition name
        minLength: 1
      soPassword:
        type: string
        description: The new partition SO password
        minLength: 1
      newClient:
        description: The initial partition client
        $ref: '#/definitions/NewClientWithCertificate'
      inherit:
        type: boolean
        description: Inherit root partition settings
      propagate:
        type: boolean
        description: ' Support certificate propagation'
    description: A UKC Partition
  NewServer:
    type: object
    required:
      - host
    properties:
      host:
        type: string
        example: ip or fqdn
        description: The server host
        minLength: 1
      port:
        type: integer
        format: int32
        example: 8443
        description: The server port
      newServerCertificate:
        description: The new server certificate
        $ref: '#/definitions/NewServerCertificate'
    description: A UKC New Server
  NewServerCertificate:
    type: object
    properties:
      certificate:
        type: string
        description: The server certificate encoded in base64
      certificateFingerprint:
        type: string
        description: The server certificate fingerprint
      certificateInfo:
        type: string
        description: The server certificate info
    description: New server certificate data
  NewUser:
    type: object
    required:
      - name
      - role
    properties:
      password:
        type: string
        description: The user password
      name:
        type: string
        example: john_a
        minLength: 1
      description:
        type: string
        description: The user description
      role:
        type: string
        description: The user role
        enum:
          - SO
          - USER
    description: A UKC new user
  Pair:
    type: object
    properties:
      entryPoint:
        description: Entry Point
        readOnly: true
        $ref: '#/definitions/Server'
      partner:
        description: Partner
        readOnly: true
        $ref: '#/definitions/Server'
    description: A UKC pair
  Partition:
    type: object
    properties:
      checkClientIp:
        type: boolean
        description: Check clients IP
        readOnly: true
      name:
        type: string
        example: root
        readOnly: true
      allowNat:
        type: boolean
        description: 'Is NAT allowed'
        readOnly: true
      allowUserOnlyCryptoOperations:
        type: boolean
        description: Is user allowed to do only crypto
        readOnly: true
      clientRetriesLimit:
        type: integer
        format: int32
        description: Number of client retries limit
        readOnly: true
      clientRetriesTimeout:
        type: integer
        format: int32
        description: Client retries timeout
        readOnly: true
      creationDate:
        type: string
        description: Partition creation date
        readOnly: true
      lastUpdate:
        type: string
        description: Partition last update
        readOnly: true
      passwordComplexity:
        type: boolean
        description: Enforce password complexity
        readOnly: true
      passwordLength:
        type: integer
        format: int32
        description: Partition allowed password length
        readOnly: true
      quorumOperations:
        type: string
        description: Quorum operations
        readOnly: true
      quorumSize:
        type: integer
        format: int32
        description: Quorum size
        readOnly: true
      quorumTimeout:
        type: integer
        format: int32
        description: Quorum timeout
        readOnly: true
      supportCertificatePropagation:
        type: boolean
        description: Enable support certificate propagation
        readOnly: true
      supportPartitionInheritance:
        type: boolean
        description: Enable support certificate inheritance
        readOnly: true
      userRetriesLimit:
        type: integer
        format: int32
        description: User retries limit
        readOnly: true
      jWTExpiration:
        type: integer
        format: int32
        description: JWT expiration time
        readOnly: true
    description: >-
      A partition is used as a logical container for security objects, such as keys
      and certificates.
  Password:
    type: object
    required:
      - password
    properties:
      password:
        type: string
        example: Password2!
        description: New user password
        minLength: 1
    description: A password
  QuorumStatus:
    type: object
    properties:
      pendingApproval:
        type: integer
        format: int32
        example: 2
        readOnly: true
      pendingExecution:
        type: integer
        format: int32
        example: 0
        readOnly: true
    description: Quorum jobs status
  RandomEntropyBytes:
    type: object
    required:
      - entropy
    properties:
      entropy:
        type: string
        description: base64 encoded entropy bytes
        minLength: 1
    description: Random Entropy Bytes
  Server:
    type: object
    properties:
      name:
        type: string
        description: The server name
        readOnly: true
      host:
        type: string
        description: The server host
        readOnly: true
      role:
        type: string
        description: The server role
        readOnly: true
        enum:
          - ENTRYPOINT
          - PARTNER
          - AUXILIARY
      status:
        type: string
        description: The server status
        readOnly: true
        enum:
          - RUNNING
          - STOPPED
      os:
        type: string
        description: The server operation system
        readOnly: true
      cores:
        type: integer
        format: int32
        description: The server amount of cores
        readOnly: true
      cpuLoadPrecents:
        type: integer
        format: int32
        description: The server CPU load
        readOnly: true
      freeMemMegaBytes:
        type: integer
        format: int32
        description: The server free Mega Bytes
        readOnly: true
      totalMemMegaBytes:
        type: integer
        format: int32
        description: The server total Mega Bytes
        readOnly: true
      version:
        type: string
        description: The server version
        readOnly: true
    description: A UKC server
  SystemInfo:
    type: object
    properties:
      version:
        type: string
        example: 2.0.1
        description: UKC server version
        readOnly: true
      allowedOperations:
        type: array
        example: '{Create,Destroy,Sign,...}'
        description: >-
          A list of operation IDs that represent the operations that the
          current user is allowed to use. It should match the operation IDs as
          specified in this document.
        readOnly: true
        items:
          type: string
      allowedPartitions:
        type: array
        example: '{part1,part2,...}'
        description: The partitions on which the user can contact them
        readOnly: true
        items:
          type: string
    description: Include information on UKC server
  Token:
    type: object
    required:
      - value
    properties:
      value:
        type: string
        example: U09Acm9vdDpQYXNzd29yZDEh
        description: The generated authentication token
        minLength: 1
    description: Auth Token
  Topology:
    type: object
    properties:
      pairs:
        type: array
        description: Pairs
        readOnly: true
        items:
          $ref: '#/definitions/Pair'
      auxiliaries:
        type: array
        description: Auxiliaries
        readOnly: true
        items:
          $ref: '#/definitions/Server'
    description: A UKC servers topology
  User:
    type: object
    properties:
      name:
        type: string
        example: john_a
        readOnly: true
      partition:
        type: string
        example: ~.codeSign.developers
        readOnly: true
      role:
        type: string
        readOnly: true
        enum:
          - SO
          - USER
      createdAt:
        type: string
        readOnly: true
      internal:
        type: boolean
        readOnly: true
      retries:
        type: integer
        format: int32
        readOnly: true
    description: A UKC user
