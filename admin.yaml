---
swagger: "2.0"
info:
  description: "The Unbound Key Control Administration API allows managing 'Unbound\
    \ Key Control' configuration and objects.\n\n# UKC API Overview\n\n\n## Authentication\
    \ Types\n\nMost UKC API operations require an authorization context and user\n\
    permissions. Users are identified by an authentication token attached to the\n\
    request headers.\n\n### Basic Authentication\n\nUKC supports the basic authentication\
    \ scheme. The \"Basic\" HTTP\nauthentication scheme is defined in  RFC 7617, which\
    \ transmits credentials\nas user/password pairs, encoded using base64 in the HTTP\
    \ Authorization\nheader.\n\n\nThe user ID can include the required partition in\
    \ the format:\n\n`username@partitionId:password`\n\n### Authentication Token\n\
    \nThe system can authenticate the user with a generated authentication token,\n\
    which is valid for a limited time. This token eliminates the need to\ntransmit\
    \ the  username/password on every request. See `GET /authToken` for\nmore information.\n\
    \n### Authentication with a Certificate\n\nThe client can authenticate with the\
    \ UKC using a client certificate. This method can be useful to either add another\
    \ layer of security or when you do not desire to use a username and password.\n\
    \n### Authentication Failure (unauthorized)\n\nIf an operation is unauthorized,\
    \ an HTTP 401 status code is returned with\nthe `WWW-Authenticate` header.\n\n\
    ## Partitioning\n\nUKC objects are organized into partitions. Partitioning allows\
    \ namespacing\nand access control to objects by configuring users with roles per\
    \ partition.\n\n\nThe objects contained in a partition are: \n\nUsers, Clients,\
    \ Keys, Certificates, Secrets and other partitions\n\n### Permissions\n\nAny partition\
    \ can have many users who can access its objects.\n\nA partition user can have\
    \ one of two security roles:\n\n- **so** - Security Officer. Can perform all operations\
    \ on the partition\nobjects including administration: adding, modifying and deleting\
    \ objects.\n\n- **user** - Can only perform cryptographic operations with the\
    \ partition\nobjects, such as sign and verify, and can also edit keys, certificates\
    \ and\nsecrets.\n\n### Root Partition\n\nThe default built-in partition for an\
    \ UKC cluster is called `root` and is\ncreated automatically when setting up a\
    \ new UKC cluster.\n\n### Partition Hierarchy\n\n- __Parent partition__ - Any\
    \ partition, _except_ the root partition, has one\nparent partition.\n\n- __Permissions\
    \ inheritance__ - User access permissions can be configured to\nbe _inherited_\
    \ from the parent partition. For example, a user `userA`, which\nis an SO on `partitionA`,\
    \ would also have SO permissions on `partitionB` if\n`partitionB` is child of\
    \ `partitionA`.\n\t- __Note:__ By default, access permissions are not inherited\
    \ from the parent partition. To use permission inheritance, it should be configured\
    \ explicitly.\n  \n### Default Partition Context\n\nFor every request the _default\
    \ partition_ is the home partition of the\nconnected user.\n\n\nFor example:\n\
    \  - `so@partitionA` - the default partition is `partitionA`.\n  - `user@partitionA.partitionB`\
    \ - the default partition is `partitionB`, which is a child of `partitionA`.\n\
    \  - `so@partitionB` - the default partition is `partitionB`, which is child of\
    \ the root partition.\n  \n### Object Path\n\n- A UKC object, such as User or\
    \ Key, can be referenced by its unique object\npath, which may be absolute or\
    \ relative to the default partition.\n\n- The object path is unique per object\
    \ type. Therefore, within one partition\nthere can be two objects represented\
    \ by the same path, one is a key and one\nis a user.\n\n- UKC object path is composed\
    \ of a series of path components separated by\nthe dot character (`.`).\n\n- A\
    \ path component may represent a partition name or object name.\n  - The last\
    \ component in a path is an object name.\n- An absolute path starts with the tilde\
    \ character `~` which represents the\nroot partition.\n  - For example, to delete\
    \ a key named `keyA` that is contained in a partition `partitionC`:\n  `DELETE\
    \ https://myukcserver.com/keys/~.partitionC.keyA`\n- A relative path uses the\
    \ current default partition as the root of the\nspecified path. \n  - If a user\
    \ is logged in as `so@partitionC`, he can perform the same delete action as in\
    \ the previous example with:\n  `DELETE https://myukcserver.com/keys/keyA`.\n\
    \  - If the user is logged in as `so@root`, he can use the following as its relative\
    \ to the root partition:\n  `DELETE https://myukcserver.com/keys/partitionC.keyA`\
    \ \n  \n## Object IDs\n\nMany operations require an object ID as part of the resource\
    \ URI. Object ids\ncan be one of:\n\n- An object __UUID__ where applicable. This\
    \ ID is a server generated ID,\nwhich is unique per object type.\n  - __Note:__\
    \ Objects of different types can have the same UUID. For example, user A and key\
    \ A. That is due to the fact that UUIDs are unique only per object type.\n- An\
    \ object relative or absolute path as specified above.\n\n## Quorum\n\nThe UKC\
    \ can be configured to require quorum approval for certain operations. In case\
    \ the operation you are executing requires it, the http result would be 202 (ACCEPTED)\
    \ and a quorum job object.\n\nUse the `jobs` API in order to manage approvals\
    \ for different jobs.\n\n\n## Common Errors\nAny API call can result in one of\
    \ the following general HTTP codes:\n- 500 - General server error\n- 404 - Resource\
    \ not found. Verify that the url exists\n- 401 - Unauthorized"
  version: "2.0.2001"
  title: "UKC Admin API"
  contact:
    name: "Contact"
    url: "https://www.unboundtech.com"
    email: "support@unboundtech.com"
tags:
- name: "Authentication"
- name: "Backup"
- name: "Clients"
- name: "General"
- name: "Jobs"
- name: "Partitions"
- name: "Roles"
- name: "System"
- name: "Users"
schemes:
- "https"
paths:
  /api/v1/authToken:
    get:
      tags:
      - "Authentication"
      summary: "Get token"
      description: "Returns an authentication token which can be used in future calls\
        \ for authentication.\nThe user credentials are provided in the HTTP headers"
      operationId: "getAuthToken"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Token"
        401:
          description: "Authentication failure, the system could not verify the user\
            \ name and password passed in the request header"
      security:
      - basicAuth: []
      - Authorization: []
    delete:
      tags:
      - "Authentication"
      summary: "Revoke token"
      description: "Invalidates an authentication token"
      operationId: "invalidateAuthToken"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
        401:
          description: "Authentication failure, the system could not verify the user\
            \ name and password passed in the request header"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/backup:
    get:
      tags:
      - "Backup"
      summary: "List backups"
      description: "List all backup items"
      operationId: "listDbBackups"
      parameters:
      - name: "from"
        in: "query"
        description: "from"
        required: false
        type: "string"
      - name: "to"
        in: "query"
        description: "to"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Limit"
        required: false
        type: "integer"
        minimum: 1
        format: "int32"
      - name: "skip"
        in: "query"
        description: "skip"
        required: false
        type: "integer"
        default: 0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/DbBackupListResponse"
      security:
      - basicAuth: []
      - Authorization: []
    post:
      tags:
      - "Backup"
      summary: "Backup database"
      description: "Perform a database backup"
      operationId: "backupDatabase"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Backup request received"
          schema:
            $ref: "#/definitions/DbBackup"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/backup/alerts:
    get:
      tags:
      - "Backup"
      summary: "Get backup alerts summary"
      description: "Get backup alerts summary"
      operationId: "getBackupAlertsSummary"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AlertsSummary"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/backup/{backupId}:
    get:
      tags:
      - "Backup"
      summary: "Get backup information"
      description: "Get database backup information"
      operationId: "getDbBackup"
      parameters:
      - name: "backupId"
        in: "path"
        description: "Backup ID"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/DbBackup"
      security:
      - basicAuth: []
      - Authorization: []
    delete:
      tags:
      - "Backup"
      summary: "Delete backup"
      description: "Delete a backup record in the database."
      operationId: "deleteDbBackup"
      parameters:
      - name: "backupId"
        in: "path"
        description: "Backup ID"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/backup/{backupId}/alerts:
    get:
      tags:
      - "Backup"
      summary: "Check for backup alert"
      description: "Get alerts from a backup. Returns an alert if backup digest test\
        \ fails."
      operationId: "getBackupAlerts"
      produces:
      - "application/json"
      parameters:
      - name: "backupId"
        in: "path"
        description: "Backup ID"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Alert"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/clients:
    get:
      tags:
      - "Clients"
      summary: "List clients"
      description: "Return a list of clients."
      operationId: "listClients"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Limit"
        required: false
        type: "integer"
        format: "int32"
      - name: "skip"
        in: "query"
        description: "skip"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      - name: "template"
        in: "query"
        description: "Template"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ClientListResponse"
      security:
      - basicAuth: []
      - Authorization: []
    post:
      tags:
      - "Clients"
      summary: "Create a client"
      description: "Creates a new client and returns the activation code."
      operationId: "createClient"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New Client"
        required: false
        schema:
          $ref: "#/definitions/NewClient"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Client"
        201:
          description: "New client created successfully"
          schema:
            $ref: "#/definitions/Client"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
        409:
          description: "Object already exists"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/clients/alerts:
    get:
      tags:
      - "Clients"
      summary: "Get alert summary"
      description: "Get a summary of the client alerts."
      operationId: "getAlertsSummary"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AlertsSummary"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/clients/with-cert:
    post:
      tags:
      - "Clients"
      summary: "Create a client with certificate"
      description: "Creates a new client and returns the certificate."
      operationId: "createClientWithCertificate"
      consumes:
      - "application/json"
      produces:
      - "application/json,application/x-pkcs12,application/x-x509-user-cert"
      - "application/json"
      - "application/x-pkcs12"
      - "application/x-x509-user-cert"
      parameters:
      - in: "body"
        name: "body"
        description: "New Client"
        required: false
        schema:
          $ref: "#/definitions/NewClientWithCertificate"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "file"
        201:
          description: "New client created successfully"
        202:
          description: "ACCEPTED"
        409:
          description: "Object already exists"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/clients/with-cert-file:
    post:
      tags:
      - "Clients"
      summary: "Create a client with certificate"
      description: "Creates a new client and returns the certificate."
      operationId: "createClientWithCertificateWithFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json,application/x-pkcs12,application/x-x509-user-cert"
      - "application/json"
      - "application/x-pkcs12"
      - "application/x-x509-user-cert"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "key file"
        required: true
        type: "file"
      - name: "newClientWithCertificate"
        in: "formData"
        description: "the new client"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "file"
        201:
          description: "New client created successfully"
        202:
          description: "ACCEPTED"
        409:
          description: "Object already exists"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/clients/with-secret:
    post:
      tags:
      - "Clients"
      summary: "Create a client with secret"
      description: "Creates a new client and returns the secret."
      operationId: "createClientWithSecret"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New Client"
        required: false
        schema:
          $ref: "#/definitions/NewClientWithSecret"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Client"
        201:
          description: "New client created successfully"
        202:
          description: "ACCEPTED"
        409:
          description: "Object already exists"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/clients/{clientId}:
    get:
      tags:
      - "Clients"
      summary: "Get client details"
      description: "Return details of a client."
      operationId: "getClient"
      produces:
      - "application/json"
      parameters:
      - name: "clientId"
        in: "path"
        description: "Client ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Client"
      security:
      - basicAuth: []
      - Authorization: []
    put:
      tags:
      - "Clients"
      summary: "Update client details"
      description: "Update client properties."
      operationId: "updateClient"
      produces:
      - "application/json"
      parameters:
      - name: "clientId"
        in: "path"
        description: "Client ID"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Clients updates"
        required: false
        schema:
          $ref: "#/definitions/ClientsUpdates"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "Client Updated successfully."
          schema:
            $ref: "#/definitions/Client"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
    delete:
      tags:
      - "Clients"
      summary: "Delete a client"
      description: "Delete the specified client."
      operationId: "deleteClient"
      produces:
      - "application/json"
      parameters:
      - name: "clientId"
        in: "path"
        description: "Client ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "Client deleted successfully."
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/clients/{clientId}/activation-code:
    put:
      tags:
      - "Clients"
      summary: "Refresh activation code"
      description: "Refresh the client's activation code."
      operationId: "refreshClientActivationCode"
      produces:
      - "application/json"
      parameters:
      - name: "clientId"
        in: "path"
        description: "Client ID"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Refreshed values"
        required: false
        schema:
          $ref: "#/definitions/RefreshedCertificateClient"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "Activation code Refreshed successfully."
          schema:
            $ref: "#/definitions/Client"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/clients/{clientId}/alerts:
    get:
      tags:
      - "Clients"
      summary: "Get alerts for a specific client"
      description: "Return the alerts for a specific client."
      operationId: "getClientAlerts"
      produces:
      - "application/json"
      parameters:
      - name: "clientId"
        in: "path"
        description: "Client ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Alert"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/clients/{clientId}/publicKey:
    put:
      tags:
      - "Clients"
      summary: "Refresh client public key"
      description: "Refresh client public key."
      operationId: "refreshClientPublicKey"
      produces:
      - "application/json"
      parameters:
      - name: "clientId"
        in: "path"
        description: "Client ID"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Refreshed values"
        required: false
        schema:
          $ref: "#/definitions/RefreshedPublicKeyClient"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "Secret Refreshed successfully."
          schema:
            $ref: "#/definitions/Client"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/clients/{clientId}/secret:
    put:
      tags:
      - "Clients"
      summary: "Refresh client secret"
      description: "Refresh client secret"
      operationId: "refreshClientSecret"
      produces:
      - "application/json"
      parameters:
      - name: "clientId"
        in: "path"
        description: "Client ID"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Refreshed values"
        required: false
        schema:
          $ref: "#/definitions/RefreshedSecretClient"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "Secret Refreshed successfully."
          schema:
            $ref: "#/definitions/Client"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/health:
    get:
      tags:
      - "General"
      summary: "Check UKC health"
      description: "Return health status of the UKC system and determine if it is\
        \ usable. As long as the HTTP return code is OK, the system is usable."
      operationId: "getHealth"
      parameters:
      - name: "pairOnly"
        in: "query"
        description: "pairOnly"
        required: false
        type: "boolean"
        default: false
      - name: "timeout"
        in: "query"
        description: "Timeout"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
  /api/v1/info:
    get:
      tags:
      - "General"
      summary: "Get system information"
      description: "Return system information, including version and supported capabilities.\
        \ If authentication is provided, it returns the allowed operations."
      operationId: "getSystemInfo"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SystemInfo"
  /api/v1/jobs/my/status:
    get:
      tags:
      - "Jobs"
      summary: "Get job status"
      description: "Get the status of pending quorum requests."
      operationId: "getQuorumStatus"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/QuorumStatus"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/jobs/quorum:
    get:
      tags:
      - "Jobs"
      summary: "List pending jobs"
      description: "Get a list of the pending quorum jobs."
      operationId: "getQuorumJobs"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/jobs/{jobId}:
    get:
      tags:
      - "Jobs"
      summary: "Get job data"
      description: "Get job data for a specific job."
      operationId: "getQuorumJob"
      produces:
      - "application/json"
      parameters:
      - name: "jobId"
        in: "path"
        description: "Job ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
    delete:
      tags:
      - "Jobs"
      summary: "Delete a job"
      description: "Delete a specific job."
      operationId: "deleteQuorumJob"
      parameters:
      - name: "jobId"
        in: "path"
        description: "Job ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/jobs/{jobId}/approve:
    post:
      tags:
      - "Jobs"
      summary: "Approve a job"
      description: "Approve a pending quorum job."
      operationId: "approveJob"
      produces:
      - "application/json"
      parameters:
      - name: "jobId"
        in: "path"
        description: "Job ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/jobs/{jobId}/execute:
    post:
      tags:
      - "Jobs"
      summary: "Execute a job"
      description: "Execute an approved quorum job."
      operationId: "executeJob"
      produces:
      - "application/json"
      parameters:
      - name: "jobId"
        in: "path"
        description: "Job ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/me/password:
    put:
      tags:
      - "Authentication"
      summary: "Change password"
      description: "Change the password for the current user. The current user credentials\
        \ are provided in the HTTP headers. Could be either password or JWT token."
      operationId: "changePassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New and existing password"
        required: false
        schema:
          $ref: "#/definitions/NewAndExistingPassword"
      responses:
        201:
          description: "Password changed successfully"
        400:
          description: "New password does not comply with password policy rules"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/pair/health:
    get:
      tags:
      - "General"
      summary: "Check pair health"
      description: "Return health status of the UKC pair and determine if it is usable"
      operationId: "getPairHealth"
      parameters:
      - name: "timeout"
        in: "query"
        description: "Timeout"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "OK"
  /api/v1/partitions:
    get:
      tags:
      - "Partitions"
      summary: "List partitions"
      description: "Get a list of partitions."
      operationId: "listPartitions"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit"
        required: false
        type: "integer"
        format: "int32"
      - name: "skip"
        in: "query"
        description: "skip"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PartitionListResponse"
      security:
      - basicAuth: []
      - Authorization: []
    post:
      tags:
      - "Partitions"
      summary: "Create a new partition"
      description: "Create a new logical partition. It can optionally create a default\
        \ client certificate for the new partition."
      operationId: "createPartition"
      consumes:
      - "application/json"
      produces:
      - "application/json,application/x-pkcs12,application/x-x509-user-cert"
      - "application/json"
      - "application/x-pkcs12"
      - "application/x-x509-user-cert"
      parameters:
      - in: "body"
        name: "body"
        description: "The new partition"
        required: false
        schema:
          $ref: "#/definitions/NewPartition"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "file"
        201:
          description: "Partition created successfully. If initial client was specified,\
            \ the response will include the generated PFX in Base64 encoded DER format"
        409:
          description: "Object already exists"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/partitions/{partitionId}:
    get:
      tags:
      - "Partitions"
      summary: "Get partition information"
      description: "Get partition information."
      operationId: "getPartition"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "path"
        description: "Partition Id"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Partition"
      security:
      - basicAuth: []
      - Authorization: []
    delete:
      tags:
      - "Partitions"
      summary: "Delete partition"
      description: "Deletes a partition. The partition must not contain any keys or\
        \ clients in order to be deleted."
      operationId: "deletePartition"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "path"
        description: "The Id of the partition to delete. The partition name can be\
          \ used as the ID"
        required: true
        type: "string"
      responses:
        200:
          description: "Partition deleted successfully"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/partitions/{partitionId}/recover:
    put:
      tags:
      - "Partitions"
      summary: "Recover partition"
      description: "Recover partition."
      operationId: "recoverPartition"
      consumes:
      - "application/json"
      produces:
      - "application/json,application/x-pkcs12,application/x-x509-user-cert"
      - "application/json"
      - "application/x-pkcs12"
      - "application/x-x509-user-cert"
      parameters:
      - name: "partitionId"
        in: "path"
        description: "Partition Id"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "The recovered partition new client"
        required: false
        schema:
          $ref: "#/definitions/NewClientWithCertificate"
      responses:
        200:
          description: "Partition recovered successfully"
          schema:
            type: "file"
        409:
          description: "Object already exists"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/partitions/{partitionId}/settings:
    get:
      tags:
      - "Partitions"
      summary: "List partition settings"
      description: "Get a list of configuration parameters for a partition."
      operationId: "getPartitionSettings"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "path"
        description: "Partition Id/name of the target partition. Can be \\&quot;default\\\
          &quot; to use the default partition for the current autneticated user."
        required: true
        type: "string"
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      - name: "signed"
        in: "query"
        description: "Signed"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/KeyValueEntry"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/partitions/{partitionId}/settings/{settingKey}:
    put:
      tags:
      - "Partitions"
      summary: "Update partition settings"
      description: "Use this method to change one or more settings for the partition."
      operationId: "updatePartitionSetting"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "path"
        required: true
        type: "string"
      - name: "settingKey"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Setting value"
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/random:
    get:
      tags:
      - "General"
      summary: "Generate random bytes"
      description: "Get random bytes from the UKC server. By default it returns 32\
        \ bytes, unless size is specified. The UKC random number generator is combined\
        \ from different entropy sources of the different servers in the UKC cluster"
      operationId: "generateRandom"
      produces:
      - "application/json"
      parameters:
      - name: "size"
        in: "query"
        description: "Size (in bytes) of random bytes to return"
        required: false
        type: "integer"
        default: 32
        maximum: 1024
        minimum: 32
        format: "int32"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/RandomEntropyBytes"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/random/entropy-bytes:
    put:
      tags:
      - "General"
      summary: "Add entropy bytes"
      description: "Add random bytes to the UKC entropy source. Different clients\
        \ can add entropy to the server. Collecting entropy from the clients can enhance\
        \ the strength of the UKC random number generator. This function only adds\
        \ entropy, i.e. if the provided value has no entropy, it does not harm the\
        \ generator quality."
      operationId: "addRandomEntropyBytes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Random bytes"
        required: false
        schema:
          $ref: "#/definitions/RandomEntropyBytes"
      responses:
        200:
          description: "OK"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/roles:
    get:
      tags:
      - "Roles"
      summary: "List partition roles"
      description: "Return a list of all roles in a partition."
      operationId: "listRoles"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Limit"
        required: false
        type: "integer"
        format: "int32"
      - name: "skip"
        in: "query"
        description: "skip"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/RoleListResponse"
      security:
      - basicAuth: []
      - Authorization: []
    post:
      tags:
      - "Roles"
      summary: "Create a new role"
      description: "Create a new role in a given partition."
      operationId: "createRole"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New Role"
        required: false
        schema:
          $ref: "#/definitions/NewRole"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        201:
          description: "Role created successfully"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
        409:
          description: "Role already exists"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/roles/{roleId}:
    get:
      tags:
      - "Roles"
      summary: "Get role details"
      description: "Get details of an existing role."
      operationId: "getRole"
      produces:
      - "application/json"
      parameters:
      - name: "roleId"
        in: "path"
        description: "Role ID to look for"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Role"
      security:
      - basicAuth: []
      - Authorization: []
    put:
      tags:
      - "Roles"
      summary: "Update a role"
      description: "Update a role."
      operationId: "updateRole"
      produces:
      - "application/json"
      parameters:
      - name: "roleId"
        in: "path"
        description: "Role ID"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Role updates"
        required: false
        schema:
          $ref: "#/definitions/UpdatedRole"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "Client Updated successfully."
          schema:
            $ref: "#/definitions/Role"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
    delete:
      tags:
      - "Roles"
      summary: "Delete a role"
      description: "Deletes a role."
      operationId: "deleteRole"
      produces:
      - "application/json"
      parameters:
      - name: "roleId"
        in: "path"
        description: "Role ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "Role deleted successfully."
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/self.cer:
    get:
      tags:
      - "General"
      summary: "Get server certificate"
      description: "Download this specific server certificate. It is used for registering\
        \ new servers."
      operationId: "selfCertGet"
      produces:
      - "application/x-x509-user-cert,application/json"
      - "application/x-x509-user-cert"
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "file"
  /api/v1/server-ca.p7b:
    get:
      tags:
      - "General"
      summary: "Get root certificate"
      description: "Download the root CA certificate of UKC."
      operationId: "getCaCert"
      produces:
      - "application/x-pkcs7-certificates,application/json"
      - "application/x-pkcs7-certificates"
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "file"
  /api/v1/servers/new/auxiliary:
    get:
      tags:
      - "System"
      summary: "Get auxiliary certificate"
      description: "Get the new auxiliary server certificate."
      operationId: "getNewAuxiliary"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "host"
        in: "query"
        description: "Auxiliary host"
        required: true
        type: "string"
      - name: "port"
        in: "query"
        description: "Auxiliary port"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/NewServer"
      security:
      - basicAuth: []
      - Authorization: []
    post:
      tags:
      - "System"
      summary: "Add auxiliary server"
      description: "Add a new auxiliary server."
      operationId: "addAuxServer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "the new auxiliary"
        required: false
        schema:
          $ref: "#/definitions/NewServer"
      - name: "force"
        in: "query"
        description: "Force"
        required: false
        type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/NewServer"
        201:
          description: "Auxiliary server added successfully"
          schema:
            $ref: "#/definitions/NewServer"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/servers/new/pair:
    get:
      tags:
      - "System"
      summary: "Get server pair certificates"
      description: "Get the new crypto server pair certificates."
      operationId: "getNewPair"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "ep_host"
        in: "query"
        description: "Entry point host"
        required: true
        type: "string"
      - name: "ep_port"
        in: "query"
        description: "Entry point port"
        required: false
        type: "integer"
        format: "int32"
      - name: "partner_host"
        in: "query"
        description: "Partner host"
        required: true
        type: "string"
      - name: "partner_port"
        in: "query"
        description: "Partner port"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/NewPair"
      security:
      - basicAuth: []
      - Authorization: []
    post:
      tags:
      - "System"
      summary: "Add UKC server pair"
      description: "Add a new UKC server pair."
      operationId: "addServerPair"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New pair"
        required: false
        schema:
          $ref: "#/definitions/NewPair"
      - name: "force"
        in: "query"
        description: "Force"
        required: false
        type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/NewPair"
        201:
          description: "Pair added successfully"
          schema:
            $ref: "#/definitions/NewPair"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/servers/{serverId}:
    get:
      tags:
      - "System"
      summary: "Get server details"
      description: "Get detailed server information."
      operationId: "getServer"
      produces:
      - "application/json"
      parameters:
      - name: "serverId"
        in: "path"
        description: "The identifier of the server is it&#39;s url (escaped)"
        required: true
        type: "string"
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Server"
      security:
      - basicAuth: []
      - Authorization: []
    delete:
      tags:
      - "System"
      summary: "Delete server"
      description: "Removes an auxiliary server or server pair from UKC cluster. A\
        \ server pair is treated as one unit, identified by the host of its Entry\
        \ Point server."
      operationId: "deleteServer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "serverId"
        in: "path"
        description: "The identifier of the server is it&#39;s url. In case of server\
          \ pair, this should be the host of the EntryPoint server"
        required: true
        type: "string"
      responses:
        200:
          description: "Server deleted"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/system/certificates:
    get:
      tags:
      - "System"
      summary: "Get system certificates"
      description: "Get the UKC servers and root CA certificates."
      operationId: "getSystemCertificates"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SystemCertificate"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/system/certificates/alerts:
    get:
      tags:
      - "System"
      summary: "Get certificate alerts"
      description: "Get alerts associated with the servers and root CA certificates."
      operationId: "getSystemAlerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AlertsSummary"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/system/certificates/{certificateId}:
    get:
      tags:
      - "System"
      summary: "Get specific certificate"
      description: "Get specific system certificate."
      operationId: "getSystemCertificate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "certificateId"
        in: "path"
        description: "Certificate ID"
        required: true
        type: "string"
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SystemCertificate"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/system/certificates/{certificateId}/alerts:
    get:
      tags:
      - "System"
      summary: "Get specific certificate alert"
      description: "Get specific system certificate alert."
      operationId: "getSystemCertificateAlerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "certificateId"
        in: "path"
        description: "Certificate ID"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SystemCertificate"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/system/keys/{keyId}:
    get:
      tags:
      - "System"
      summary: "Get integrity key"
      description: "Get a root CA key signed with JWS."
      operationId: "getIntegrityKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "keyId"
        in: "path"
        description: "Key ID"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/JWS"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/system/settings:
    get:
      tags:
      - "System"
      summary: "Get system settings"
      description: "Get UKC system configuration parameters. Returns a list of key-value\
        \ entries that represent the configuration parameters for the UKC system."
      operationId: "getSettings"
      produces:
      - "application/json"
      parameters:
      - name: "detailed"
        in: "query"
        description: "detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/KeyValueEntry"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/system/settings/{settingKey}:
    put:
      tags:
      - "System"
      summary: "Set system settings"
      description: "Sets the value for one or more system configuration parameters."
      operationId: "setSettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "settingKey"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Setting value"
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/system/signlogs:
    get:
      tags:
      - "System"
      summary: "Get signed logs"
      description: "Return signed logs (compressed) from the UKC engine."
      operationId: "logSign"
      produces:
      - "application/json"
      - "application/x-tar"
      parameters:
      - name: "from"
        in: "query"
        description: "from"
        required: false
        type: "string"
      - name: "to"
        in: "query"
        description: "to"
        required: false
        type: "string"
      - name: "period"
        in: "query"
        description: "period"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/token:
    post:
      tags:
      - "Authentication"
      summary: "Get OAuth token"
      description: "Returns an authentication token which can be used in future calls\
        \ for authentication."
      operationId: "getToken"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "grantType"
        in: "formData"
        required: true
        type: "string"
      - name: "username"
        in: "formData"
        required: false
        type: "string"
      - name: "password"
        in: "formData"
        required: false
        type: "string"
      - name: "token"
        in: "formData"
        required: false
        type: "string"
      - name: "assertion"
        in: "formData"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/OauthToken"
        401:
          description: "Authentication failure, the system could not verify the user\
            \ name and password passed in the request header"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/token/revoke:
    post:
      tags:
      - "Authentication"
      summary: "Revoke all OAuth tokens"
      description: "Revokes all tokens related to given authentication."
      operationId: "revokeToken"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "formData"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
        401:
          description: "Authentication failure, the system could not verify the user\
            \ name and password passed in the request header"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/topology:
    get:
      tags:
      - "System"
      summary: "Get cluster topology"
      description: "Return the topology in the cluster including servers status."
      operationId: "getTopology"
      produces:
      - "application/json"
      parameters:
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Topology"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/trust:
    get:
      tags:
      - "General"
      summary: "Get trusted certificates"
      description: "Get all trusted certificates."
      operationId: "getTrust"
      produces:
      - "application/json"
      parameters:
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SystemCertificate"
  /api/v1/users:
    get:
      tags:
      - "Users"
      summary: "List partition users"
      description: "Return a list of all users in a partition."
      operationId: "listUsers"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Limit"
        required: false
        type: "integer"
        format: "int32"
      - name: "skip"
        in: "query"
        description: "skip"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserListResponse"
      security:
      - basicAuth: []
      - Authorization: []
    post:
      tags:
      - "Users"
      summary: "Create a user"
      description: "Create a new user in a given partition."
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New User"
        required: false
        schema:
          $ref: "#/definitions/NewUser"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        201:
          description: "User created successfully"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
        409:
          description: "Object already exists"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/users/{soId}/recover:
    put:
      tags:
      - "Users"
      summary: "Recover SO password"
      description: "Recover the SO password. The Root SO can do it for other SOs."
      operationId: "recoverSoPassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Password"
        required: false
        schema:
          $ref: "#/definitions/Password"
      - name: "soId"
        in: "path"
        description: "So ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: true
        type: "string"
      responses:
        200:
          description: "So password recovered successfully"
        400:
          description: "New password does not comply with password policy rules"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/users/{userId}:
    get:
      tags:
      - "Users"
      summary: "Get user details"
      description: "Get details of an existing user."
      operationId: "getUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID to look for"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/User"
      security:
      - basicAuth: []
      - Authorization: []
    put:
      tags:
      - "Users"
      summary: "Change user role"
      description: "Change an existing user role."
      operationId: "changeUserRole"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID to look for"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Role ID"
        required: false
        schema:
          type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/User"
      security:
      - basicAuth: []
      - Authorization: []
    delete:
      tags:
      - "Users"
      summary: "Delete a user"
      description: "Delete a user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "User deleted successfully."
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/users/{userId}/password:
    put:
      tags:
      - "Users"
      summary: "Reset user password"
      description: "Reset user password. SO can do it for users in his partition.\
        \ The root parition SO can do it to SO of any partition."
      operationId: "resetUserPassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Password"
        required: false
        schema:
          $ref: "#/definitions/Password"
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "User password reset successfully"
        400:
          description: "New password does not comply with password policy rules"
      security:
      - basicAuth: []
      - Authorization: []
securityDefinitions:
  Authorization:
    description: "For accessing the API a valid JWT token must be passed in all the\
      \ queries in\nthe 'Authorization' header.\nA valid JWT token is generated by\
      \ the API and returned as answer of a call\nto the route /login giving a valid\
      \ user and password.\nThe following syntax must be \nused in the 'Authorization'\
      \ header :\n       Bearer: xxxxxx.yyyyyyy.zzzzzz"
    type: "apiKey"
    name: "Authorization"
    in: "header"
  basicAuth:
    type: "basic"
definitions:
  Alert:
    type: "object"
    properties:
      alertType:
        type: "string"
        readOnly: true
        enum:
        - "CERT_ABOUT_TO_EXPIRE"
        - "CERT_EXPIRED"
        - "OUT_OF_SYNC"
        - "IS_LOCKED"
        - "RENEW_REQUIRED"
        - "DB_BACKUP_INCONSISTENT"
        - "SECRET_ABOUT_TO_EXPIRE"
        - "SECRET_EXPIRED"
        - "KEY_ROTATION_IS_APPROACHING"
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
      title:
        type: "string"
        readOnly: true
  AlertsSummary:
    type: "object"
    properties:
      category:
        type: "string"
        readOnly: true
        enum:
        - "CLIENTS"
        - "SYSTEM"
        - "KEYS"
        - "BACKUP"
      alertType:
        type: "string"
        readOnly: true
        enum:
        - "CERT_ABOUT_TO_EXPIRE"
        - "CERT_EXPIRED"
        - "OUT_OF_SYNC"
        - "IS_LOCKED"
        - "RENEW_REQUIRED"
        - "DB_BACKUP_INCONSISTENT"
        - "SECRET_ABOUT_TO_EXPIRE"
        - "SECRET_EXPIRED"
        - "KEY_ROTATION_IS_APPROACHING"
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
      counter:
        type: "integer"
        format: "int32"
        readOnly: true
      title:
        type: "string"
        readOnly: true
  AlternativeNames:
    type: "object"
    required:
    - "isCritical"
    - "uid"
    properties:
      names:
        type: "array"
        items:
          type: "string"
      uid:
        type: "string"
        description: "Extension UID"
      isCritical:
        type: "boolean"
        description: "Is Extension Critical"
    description: "Certificate x509 extension"
  AuthorityKeyIdentifier:
    type: "object"
    required:
    - "isCritical"
    - "uid"
    properties:
      uid:
        type: "string"
        description: "Extension UID"
      isCritical:
        type: "boolean"
        description: "Is Extension Critical"
      keyId:
        type: "string"
        readOnly: true
      authNames:
        type: "array"
        items:
          type: "string"
      serialNumber:
        type: "string"
    description: "Certificate x509 extension"
  BasicConstraints:
    type: "object"
    required:
    - "isCritical"
    - "uid"
    properties:
      uid:
        type: "string"
        description: "Extension UID"
      isCritical:
        type: "boolean"
        description: "Is Extension Critical"
      pathLen:
        type: "integer"
        format: "int32"
      isCa:
        type: "boolean"
    description: "Certificate x509 extension"
  CertificateInfo:
    type: "object"
    required:
    - "id"
    - "isCa"
    - "isSelfSigned"
    - "issuer"
    - "pkInfo"
    - "serial"
    - "sha1Thumbprint"
    - "signature"
    - "signatureAlgorithm"
    - "subject"
    - "uid"
    - "validFrom"
    - "validUntil"
    - "version"
    properties:
      id:
        type: "string"
        example: "my-certificate"
        description: "Certificate identifier label"
      uid:
        type: "string"
      sha1Thumbprint:
        type: "string"
        description: "certificate sha1"
      subject:
        type: "string"
      issuer:
        type: "string"
        description: "The CA that signed this certificate"
      validFrom:
        type: "string"
        description: "Date of of validity period start for this certificate"
      validUntil:
        type: "string"
        description: "Date of of validity period end for this certificate"
      version:
        type: "string"
        example: "V3"
        description: "Certificate version"
      serial:
        type: "string"
        example: "185fb61e97f55b19"
        description: "Certificate serial number"
      signatureAlgorithm:
        type: "string"
        example: "sha256RSA"
        description: "Signing algorithm used for signing this certificate"
      isCa:
        type: "boolean"
        description: "Determines if this certificate is a CA certificate"
      isSelfSigned:
        type: "boolean"
        description: "Determines if this certificate is a self signed certificate"
      pkInfo:
        $ref: "#/definitions/PKInfoType"
      basicConstraints:
        description: "Basic Constraints Extension"
        $ref: "#/definitions/BasicConstraints"
      subjectKeyIdentifier:
        description: "Subject Key Identifier Extension"
        $ref: "#/definitions/SubjectKeyIdentifier"
      authorityKeyIdentifier:
        description: "Authority Key Identifier Extension"
        $ref: "#/definitions/AuthorityKeyIdentifier"
      subjectAlternativeNames:
        description: "Subject Alternative Names Extension"
        $ref: "#/definitions/AlternativeNames"
      issuerAlternativeNames:
        description: "Issuer Alternative Names Extension"
        $ref: "#/definitions/AlternativeNames"
      extendedKeyUsage:
        description: "Extended Key Usage Extension"
        $ref: "#/definitions/ExtendedKeyUsage"
      signature:
        type: "string"
        description: "CA signature value for this certificate"
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
    description: "Certificate public information"
  Client:
    type: "object"
    properties:
      name:
        type: "string"
        example: "client-name"
        description: "Client name"
        readOnly: true
      partition:
        type: "string"
        example: "~.codeSign.developers"
        readOnly: true
      createdAt:
        type: "string"
      activationStatus:
        type: "string"
        description: "Client activation status"
        readOnly: true
        enum:
        - "ACTIVATED"
        - "PENDING"
        - "LOCKED"
      activationType:
        type: "string"
        description: "Client activation type"
        readOnly: true
        enum:
        - "CERTIFICATE_REQUEST"
        - "ACTIVATION_CODE"
        - "CERTIFICATE_DOWNLOAD"
        - "EXTERNAL"
        - "TEMPLATE"
        - "SECRET"
        - "EPHEMERAL"
        - "PUBLIC_KEY"
      lastUpdatedAt:
        type: "string"
        description: "Last update time for this client record"
        readOnly: true
      failedActivationCounter:
        type: "integer"
        format: "int32"
        description: "Number of failed retries to use client activation code"
        readOnly: true
      isActivationLocked:
        type: "boolean"
        readOnly: true
      checkIp:
        type: "boolean"
        description: "Enforce client ip verification"
      allowNat:
        type: "boolean"
        description: "Allow client use NAT"
      ipRange:
        type: "string"
        description: "Client IP range"
      expiresAt:
        type: "string"
        description: "Client secret expiration date"
      expiration:
        type: "integer"
        format: "int32"
        description: "Client secret expiration time (ms)"
      activationCodeValidity:
        type: "integer"
        format: "int32"
        description: "Client activation code validity in minutes"
      activationCodeLength:
        type: "integer"
        format: "int32"
        description: "Client activation code length (digits)"
      activationCodeExpiration:
        type: "string"
        description: "Client activation code expiration date"
      template:
        type: "string"
        description: "Client template"
      activationCode:
        type: "string"
        description: "Client activation code"
      certificateRenewRequired:
        type: "boolean"
        description: "Is client certificate need to be renewed"
      grantTypes:
        type: "array"
        description: "Client grant types"
        uniqueItems: true
        items:
          type: "string"
          enum:
          - "CLIENT_CREDENTIALS"
          - "PASSWORD"
          - "REFRESH_TOKEN"
          - "JWT_BEARER"
      certificateInfo:
        description: "Client certificate info"
        $ref: "#/definitions/CertificateInfo"
      certExpiresAt:
        type: "string"
        description: "Client certificate expiration date"
        readOnly: true
      certificateExpiration:
        type: "integer"
        format: "int32"
        description: "Client certificate validity in minutes"
        readOnly: true
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
      version:
        type: "string"
        description: "Client version"
      secret:
        type: "string"
        description: "Client secret"
    description: "A UKC new client"
  ClientListResponse:
    type: "object"
    properties:
      totalItems:
        type: "integer"
        format: "int32"
        readOnly: true
      limit:
        type: "integer"
        format: "int32"
        readOnly: true
      skip:
        type: "integer"
        format: "int32"
        readOnly: true
      items:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Client"
  ClientsUpdates:
    type: "object"
    properties:
      checkIp:
        type: "boolean"
        example: false
        description: "Enforce client ip verification"
      allowNat:
        type: "boolean"
        example: false
        description: "Allow client use NAT"
      ipRange:
        type: "string"
        example: "0.0.0.0/0"
        description: "Client IP range"
  DbBackup:
    type: "object"
    properties:
      id:
        type: "string"
      state:
        type: "string"
        enum:
        - "IN_PROGRESS"
        - "PENDING_TEST"
        - "TEST_SUCCESS"
        - "TEST_FAILURE"
        - "MANUAL_TEST"
        - "GENERAL_FAILURE"
        - "INVALID"
      date:
        type: "string"
      file:
        type: "string"
      pairHostnames:
        type: "array"
        items:
          type: "string"
      version:
        type: "string"
      digestDiff:
        $ref: "#/definitions/DigestDiff"
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
  DbBackupListResponse:
    type: "object"
    properties:
      totalItems:
        type: "integer"
        format: "int32"
        readOnly: true
      limit:
        type: "integer"
        format: "int32"
        readOnly: true
      skip:
        type: "integer"
        format: "int32"
        readOnly: true
      items:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/DbBackup"
  DiffRecord:
    type: "object"
    properties:
      sectionDiff:
        type: "string"
      entitiesDiff:
        type: "array"
        items:
          type: "string"
  DigestDiff:
    type: "object"
    properties:
      diffRecords:
        type: "array"
        items:
          $ref: "#/definitions/DiffRecord"
  ECCBipKeyInfo:
    type: "object"
    properties:
      level:
        type: "string"
        format: "byte"
        description: "Level (0 for master)"
        readOnly: true
      childNumber:
        type: "integer"
        format: "int32"
        description: "child number"
        readOnly: true
      hardened:
        type: "boolean"
        description: "True if hardened"
        readOnly: true
      chainCode:
        type: "string"
        description: "BASE64 chain code"
        readOnly: true
      parentUid:
        type: "string"
        description: "the parent uid"
        readOnly: true
      parentFingerprint:
        type: "integer"
        format: "int32"
        description: "parent fingerprint (The first 32 bits of the identifier)"
        readOnly: true
  ECCKeyInfoType:
    type: "object"
    required:
    - "curve"
    - "ecPoint"
    - "eccBipKeyInfo"
    properties:
      curve:
        type: "string"
        enum:
        - "P256"
        - "P384"
        - "P521"
        - "SECP_256K_1"
      ecPoint:
        type: "string"
        description: "Encoded public key (EC point)"
      eccBipKeyInfo:
        description: "ECC BIP info"
        $ref: "#/definitions/ECCBipKeyInfo"
    description: "Details of ECC public key"
  ExtendedKeyUsage:
    type: "object"
    required:
    - "isCritical"
    - "uid"
    properties:
      keyUsages:
        type: "array"
        items:
          type: "string"
      uid:
        type: "string"
        description: "Extension UID"
      isCritical:
        type: "boolean"
        description: "Is Extension Critical"
    description: "Certificate x509 extension"
  JWS:
    type: "object"
    properties:
      value:
        type: "string"
        example: "eyJraWQiOiJpbnRlZ3JpdHkta2V5IiwiYWxnIjoiRVMyNTYifQ.eyJpZCI6InIxIiwidWlkIjoiMHgwMDY0MjczNWJmNDkyNDNiODciLCJvYmplY3RUeXBlIjoiUFJJVkFURV9LRVkiLCJrZXlGb3JtYXQiOnsidHlwZSI6IlJTQSIsInNpemUiOjIwNDh9LCJrZXlQcm9wZXJ0aWVzIjp7InRydXN0ZWQiOmZhbHNlLCJleHBvcnRUeXBlIjoiTk9OX0VYUE9SVEFCTEUiLCJncm91cHMiOlsiZGVmYXVsdCJdfSwibG9jYWwiOnRydWUsImhhc0NlcnRpZmljYXRlIjpmYWxzZSwic3RhdGUiOiJBQ1RJVkUiLCJzeW5jIjp0cnVlLCJyZXF1aXJlQXBwcm92YWwiOmZhbHNlLCJwa0luZm8iOnsicnNhIjp7InB1YmxpY0V4cG9uZW50IjoiNjU1MzciLCJtb2R1bHVzIjoiMDA6QkQ6MTA6MTc6ODI6QkM6M0U6Mjc6MDI6QUQ6RDI6Mjk6REI6ODQ6ODY6MTE6QjY6RDk6REM6MTA6QjU6M0I6QjU6QTM6NzA6OEY6MUU6QUE6Mzk6MkI6Njc6RTE6Nzk6NzM6RDc6QkU6OTA6RDY6REU6QjQ6REM6OUM6RjY6Nzc6MDg6MTA6RkQ6QzE6N0Y6Qzk6M0Y6RDQ6RTk6OTQ6MDM6NjM6Q0E6RDQ6NUI6NEE6MjE6QUU6Qzg6RjE6RkY6OTU6MzY6RDI6RDE6NzI6QUE6M0I6NEY6RUQ6MjA6MzI6RDk6NDc6QzM6NTk6NDI6MDk6NkI6RUU6Rjc6MjA6NUU6NTA6NjM6ODg6NkU6QzY6NzY6RjI6NjA6QUM6MTM6Mzc6MDE6NDM6NkU6Qzc6NDc6MjA6RTc6NjI6MzI6MjI6REQ6NDA6Qjk6MDk6MjI6M0U6RTc6QkY6NDU6MUM6NzY6OTg6QUM6Rjg6RTA6MjU6Qjg6RDY6NDQ6QTQ6RkM6N0I6Qjc6NkQ6RTc6REM6Q0I6OEM6NjU6MTA6RUM6QUE6RTU6Qzg6RUQ6Q0U6NzI6RUE6RDA6MjU6QjQ6OUQ6MkQ6QkI6REY6QjU6NUQ6QjQ6OTA6NUM6MDI6N0U6MEU6N0E6MjQ6QjM6Qzg6Qjg6RTc6QzM6RDg6NEU6ODI6OUE6NUQ6N0M6QkM6Mzk6MDg6MjA6Njg6NDc6NDc6Rjk6NDc6QkU6MzU6NkE6NUQ6NUQ6NkY6MUI6QTM6QjQ6MUY6QjU6Mjg6Njg6QjU6ODI6QkI6RDQ6NkI6RjQ6RTE6MzI6RDA6Qzg6M0I6MDU6QjA6MzE6RTA6NTQ6NEE6QjY6ODU6NkM6MUY6MkE6QkU6QjQ6MTQ6Q0M6NEE6Mjk6M0E6OEE6RTc6QUI6ODg6RDQ6RTg6OEY6QTE6NkI6RTQ6ODQ6N0Y6NUE6RjU6QzU6QjU6RUY6RDQ6REQ6Mjg6Njc6MjE6Qzg6QkU6OUY6Mzk6QzE6MTQ6Mzk6Q0Y6RDA6REIifX0sImNyZWF0ZWRBdCI6IjIwMTktMDMtMTFUMDg6MzM6NDdaIiwidXBkYXRlZEF0IjoiMjAxOS0wMy0xMVQwODozMzo0OFoifQ.OMsru0JgLra358guXW8jMgCgArlkHdeR0m2rbFLl4yIKLNjxt4TUv3q2IpdUKgeOvWsexBb3VT1TZQ7ON6Y3pA"
        description: "value"
        readOnly: true
  Job:
    type: "object"
    properties:
      initiator:
        type: "string"
        example: "so@root"
        readOnly: true
      id:
        type: "string"
        example: "389323ee-3588-416e-94bd-f93ca815762e"
        readOnly: true
      title:
        type: "string"
        readOnly: true
      opName:
        type: "string"
        example: "PARTITION_CONFIG_SET "
        readOnly: true
      createdAt:
        type: "string"
        readOnly: true
      expiresAt:
        type: "string"
        readOnly: true
      opParams:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/KeyValueEntry"
      response:
        type: "string"
        readOnly: true
      approvedBy:
        type: "array"
        readOnly: true
        items:
          type: "string"
      status:
        type: "string"
        readOnly: true
        enum:
        - "PENDING_APPROVAL"
        - "PENDING_EXECUTION"
        - "DONE"
        - "EXPIRED"
      totalRequiredApprovals:
        type: "integer"
        format: "int32"
        readOnly: true
    description: "An asynchrounous job"
  KeyValueEntry:
    type: "object"
    required:
    - "key"
    - "value"
    properties:
      key:
        type: "string"
        minLength: 1
      value:
        type: "string"
      description:
        type: "string"
        description: "quorum timeout"
        readOnly: true
      type:
        type: "string"
        description: "value type"
        readOnly: true
        enum:
        - "BOOLEAN"
        - "TEXT"
        - "INTEGER"
        - "ARRAY"
        - "MAP"
        - "CERTIFICATE"
      defaultValue:
        type: "string"
        description: "default value"
        readOnly: true
      min:
        type: "integer"
        format: "int32"
        description: "minimum value"
        readOnly: true
      max:
        type: "integer"
        format: "int32"
        description: "maximum value"
        readOnly: true
      unit:
        type: "string"
        description: "unit type"
        readOnly: true
        enum:
        - "SECONDS"
        - "MINUTES"
        - "HOURS"
        - "DAYS"
        - "MONTHS"
        - "YEARS"
        - "CHARACTERS"
        - "MILLIS"
    description: "Key value entry"
  NewAndExistingPassword:
    type: "object"
    required:
    - "existingPassword"
    - "newPassword"
    properties:
      existingPassword:
        type: "string"
        description: "The existing user password"
        minLength: 1
      newPassword:
        type: "string"
        description: "The new password"
        minLength: 1
    description: "New And Existing Password"
  NewClient:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "client-name"
        description: "Client name"
        minLength: 1
      checkIp:
        type: "boolean"
        example: false
        description: "Enforce client ip verification"
      allowNat:
        type: "boolean"
        example: false
        description: "Allow client use NAT"
      expiration:
        type: "integer"
        format: "int32"
        example: 1578240
        description: "Client expiration in minutes"
      activationCodeValidity:
        type: "integer"
        format: "int32"
        example: 20
        description: "Client activation code validity in minutes"
      isTemplate:
        type: "boolean"
        example: false
        description: "Is client is a template client or not"
      activationCodeLength:
        type: "integer"
        format: "int32"
        example: 10
        description: "Client activation code length (digits)"
      ipRange:
        type: "string"
        example: "0.0.0.0/0"
        description: "Client IP range"
      certificateExpiration:
        type: "integer"
        format: "int32"
        example: 1578240
        description: "Client certificate validity in minutes"
  NewClientWithCertificate:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "client-name"
        description: "Client name"
        minLength: 1
      checkIp:
        type: "boolean"
        example: false
        description: "Enforce client ip verification"
      allowNat:
        type: "boolean"
        example: false
        description: "Allow client use NAT"
      expiration:
        type: "integer"
        format: "int32"
        example: 1578240
        description: "Client expiration in minutes"
      alternativeNames:
        type: "array"
        example: "{client-ip,client-name}"
        description: "Client alternative names"
        items:
          type: "string"
      pfxPassword:
        type: "string"
        description: "The new client PFX password"
      csr:
        type: "string"
        example: "MIIByjCCATMCAQAwgYkxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlh\n\
          MRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRMwEQYDVQQKEwpHb29nbGUgSW5jMR8w\nHQYDVQQLExZJbmZvcm1hdGlvbiBUZWNobm9sb2d5MRcwFQYDVQQDEw53d3cuZ29v\n\
          Z2xlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEApZtYJCHJ4VpVXHfV\nIlstQTlO4qC03hjX+ZkPyvdYd1Q4+qbAeTwXmCUKYHThVRd5aXSqlPzyIBwieMZr\n\
          WFlRQddZ1IzXAlVRDWwAo60KecqeAXnnUK+5fXoTI/UgWshre8tJ+x/TMHaQKR/J\ncIWPhqaQhsJuzZbvAdGA80BLxdMCAwEAAaAAMA0GCSqGSIb3DQEBBQUAA4GBAIhl\n\
          4PvFq+e7ipARgI5ZM+GZx6mpCz44DTo0JkwfRDf+BtrsaC0q68eTf2XhYOsq4fkH\nQ0uA0aVog3f5iJxCa3Hp5gxbJQ6zV6kJ0TEsuaaOhEko9sdpCoPOnRBm2i/XRD2D\n\
          6iNh8f8z0ShGsFqjDgFHyF3o+lUyj+UC6H1QW7bn"
        description: "The new client Base64 encoded Certificate Request"
      publicKey:
        type: "string"
        example: "MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQMDMgAE+Y+qPqI3geo2hQH8eK7Rn+YWG09T\n\
          ejZ5QFoj9fmxFrUyYhFap6XmTdJtEi8myBmW"
        description: "The new client Base64 encoded ECC Public Key"
      certificateExpiration:
        type: "integer"
        format: "int32"
        example: 1578240
        description: "Client certificate validity in minutes"
  NewClientWithSecret:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "client-name"
        description: "Client name"
        minLength: 1
      checkIp:
        type: "boolean"
        example: false
        description: "Enforce client ip verification"
      allowNat:
        type: "boolean"
        example: false
        description: "Allow client use NAT"
      expiration:
        type: "integer"
        format: "int32"
        example: 1578240
        description: "Client expiration in minutes"
      ipRange:
        type: "string"
        example: "0.0.0.0/0"
        description: "Client IP range"
      grantTypes:
        type: "array"
        description: "Client grant types"
        uniqueItems: true
        items:
          type: "string"
          enum:
          - "CLIENT_CREDENTIALS"
          - "PASSWORD"
          - "REFRESH_TOKEN"
          - "JWT_BEARER"
        minItems: 1
  NewPair:
    type: "object"
    required:
    - "entryPoint"
    - "partner"
    properties:
      entryPoint:
        description: "Entry Point"
        $ref: "#/definitions/NewServer"
      partner:
        description: "Partner"
        $ref: "#/definitions/NewServer"
    description: "A UKC pair"
  NewPartition:
    type: "object"
    required:
    - "name"
    - "newClient"
    - "soPassword"
    properties:
      name:
        type: "string"
        description: "The new partition name"
        minLength: 1
      soPassword:
        type: "string"
        description: "The new partition SO password"
        minLength: 1
      newClient:
        description: "The initial partition client"
        $ref: "#/definitions/NewClientWithCertificate"
      inherit:
        type: "boolean"
        example: false
        description: "Inherit root partition settings"
      propagate:
        type: "boolean"
        example: false
        description: " Support certificate propagation"
      fipsRequirements:
        type: "string"
        example: "FIPS_NONE"
        description: "The Partition FIPS Requirements"
        enum:
        - "FIPS_MANDATORY"
        - "FIPS_PREFERRED"
        - "FIPS_NONE"
      isAllowDefaultClient:
        type: "boolean"
        example: false
        description: "Allow using default client"
    description: "A UKC Partition"
  NewRole:
    type: "object"
    required:
    - "managedObjectsPermissions"
    - "name"
    properties:
      name:
        type: "string"
        example: "role_name"
        description: "role name"
        minLength: 1
      managedObjectsPermissions:
        type: "array"
        items:
          $ref: "#/definitions/RolePermission"
  NewServer:
    type: "object"
    required:
    - "host"
    properties:
      host:
        type: "string"
        example: "ip or fqdn"
        description: "The server host"
        minLength: 1
      port:
        type: "integer"
        format: "int32"
        example: 8443
        description: "The server port"
      newServerCertificate:
        description: "The new server certificate"
        $ref: "#/definitions/NewServerCertificate"
    description: "An UKC New Server"
  NewServerCertificate:
    type: "object"
    properties:
      certificate:
        type: "string"
        description: "The server certificate encoded in base64"
      certificateFingerprint:
        type: "string"
        description: "The server certificate fingerprint"
      certificateInfo:
        type: "string"
        description: "The server certificate info"
    description: "New server certificate data"
  NewUser:
    type: "object"
    required:
    - "name"
    - "role"
    properties:
      password:
        type: "string"
        example: "Password1!"
        description: "The user password"
      name:
        type: "string"
        example: "john_a"
        minLength: 1
      description:
        type: "string"
        description: "The user description"
      role:
        type: "string"
        example: "user"
        description: "The user role"
      authType:
        type: "string"
        example: "STANDARD"
        enum:
        - "STANDARD"
        - "LDAP"
    description: "A UKC new user"
  OauthToken:
    type: "object"
    properties:
      accessToken:
        type: "string"
        example: "eyJ...MoQ"
        description: "Access Token"
      tokenType:
        type: "string"
        example: "bearer"
        description: "Token type"
      expiresAt:
        type: "string"
        description: "Token expiration date"
      expiresIn:
        type: "integer"
        format: "int32"
        example: 1000
        description: "The lifetime of the access token, in seconds"
      scope:
        type: "string"
        example: "user"
        description: "The provided scope (the user Role)"
      refreshToken:
        type: "string"
        example: "eyJ...0N"
        description: "Refresh Token"
    description: "Oauth Token"
  PKInfoType:
    type: "object"
    properties:
      rsa:
        $ref: "#/definitions/RSAKeyInfoType"
      ecc:
        $ref: "#/definitions/ECCKeyInfoType"
    description: "Properties of PKI key"
  Pair:
    type: "object"
    properties:
      entryPoint:
        description: "Entry Point"
        readOnly: true
        $ref: "#/definitions/Server"
      partner:
        description: "Partner"
        readOnly: true
        $ref: "#/definitions/Server"
    description: "A UKC pair"
  Partition:
    type: "object"
    properties:
      checkClientIp:
        type: "boolean"
        description: "check clients ip"
        readOnly: true
      name:
        type: "string"
        example: "root"
        readOnly: true
      allowNat:
        type: "boolean"
        description: "True when allowing NAT"
        readOnly: true
      allowUserOnlyCryptoOperations:
        type: "boolean"
        description: "True if user is only allowed to do crypto"
        readOnly: true
      clientRetriesLimit:
        type: "integer"
        format: "int32"
        description: "client retries limit"
        readOnly: true
      clientRetriesTimeout:
        type: "integer"
        format: "int32"
        description: "client retries timeout"
        readOnly: true
      creationDate:
        type: "string"
        description: "partition creation date"
        readOnly: true
      getjWTLimit:
        type: "integer"
        format: "int32"
        description: "JWT usage limit"
        readOnly: true
      lastUpdate:
        type: "string"
        description: "partition last update"
        readOnly: true
      passwordComplexity:
        type: "boolean"
        description: "enforce password complexity"
        readOnly: true
      passwordLength:
        type: "integer"
        format: "int32"
        description: "partition allowed password length"
        readOnly: true
      quorumOperations:
        type: "string"
        description: "quorum operations"
        readOnly: true
      quorumSize:
        type: "integer"
        format: "int32"
        description: "quorum size"
        readOnly: true
      quorumTimeout:
        type: "integer"
        format: "int32"
        description: "quorum timeout"
        readOnly: true
      supportCertificatePropagation:
        type: "boolean"
        description: "True when supporting certificate propagation"
        readOnly: true
      supportPartitionInheritance:
        type: "boolean"
        description: "True when supporting certificate inheritance"
        readOnly: true
      userRetriesLimit:
        type: "integer"
        format: "int32"
        description: "user retries limit"
        readOnly: true
      fipsRequirements:
        type: "string"
        example: "FIPS_NONE"
        description: "The Partition FIPS Requirements"
        enum:
        - "FIPS_MANDATORY"
        - "FIPS_PREFERRED"
        - "FIPS_NONE"
      jWTExpiration:
        type: "integer"
        format: "int32"
        description: "JWT expiration time"
        readOnly: true
    description: "A partitions is used as a logical container for security objects\
      \ like keys and Certificates"
  PartitionListResponse:
    type: "object"
    properties:
      totalItems:
        type: "integer"
        format: "int32"
        readOnly: true
      limit:
        type: "integer"
        format: "int32"
        readOnly: true
      skip:
        type: "integer"
        format: "int32"
        readOnly: true
      items:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Partition"
  Password:
    type: "object"
    properties:
      password:
        type: "string"
        example: "Password2!"
        description: "New user password"
    description: "A password"
  QuorumStatus:
    type: "object"
    properties:
      pendingApproval:
        type: "integer"
        format: "int32"
        example: 2
        readOnly: true
      pendingExecution:
        type: "integer"
        format: "int32"
        example: 0
        readOnly: true
    description: "Quorum jobs status"
  RSAKeyInfoType:
    type: "object"
    required:
    - "modulus"
    - "publicExponent"
    properties:
      publicExponent:
        type: "string"
        description: "HEX encoded exponent"
      modulus:
        type: "string"
        description: "HEX encoded modulus"
    description: "Details of RSA public key"
  RandomEntropyBytes:
    type: "object"
    required:
    - "entropy"
    properties:
      entropy:
        type: "string"
        description: "base64 encoded entropy bytes"
        minLength: 1
    description: "Random Entropy Bytes"
  RefreshedCertificateClient:
    type: "object"
    properties:
      certificateExpiration:
        type: "integer"
        format: "int32"
        example: 1578240
        description: "Client certificate validity in minutes"
      activationCodeValidity:
        type: "integer"
        format: "int32"
        example: 20
        description: "Client activation code validity in minutes"
      activationCodeLength:
        type: "integer"
        format: "int32"
        example: 10
        description: "Client activation code length (digits)"
      ipRange:
        type: "string"
        example: "0.0.0.0/0"
        description: "Client IP range"
  RefreshedPublicKeyClient:
    type: "object"
    required:
    - "publicKey"
    properties:
      publicKey:
        type: "string"
        example: "MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQMDMgAE+Y+qPqI3geo2hQH8eK7Rn+YWG09T\n\
          ejZ5QFoj9fmxFrUyYhFap6XmTdJtEi8myBmW"
        description: "The new client Base64 encoded ECC Public Key"
        minLength: 1
      expiration:
        type: "integer"
        format: "int32"
        example: 1578240
        description: "Client certificate validity in minutes"
      alternativeNames:
        type: "array"
        example: "{client-ip,client-name}"
        description: "Client alternative names"
        items:
          type: "string"
  RefreshedSecretClient:
    type: "object"
    properties:
      expiration:
        type: "integer"
        format: "int32"
        example: 1578240
        description: "Client expiration in minutes"
      grantTypes:
        type: "array"
        description: "Client grant types"
        uniqueItems: true
        items:
          type: "string"
          enum:
          - "CLIENT_CREDENTIALS"
          - "PASSWORD"
          - "REFRESH_TOKEN"
          - "JWT_BEARER"
        minItems: 1
  Role:
    type: "object"
    properties:
      name:
        type: "string"
        example: "role_name"
        readOnly: true
      partition:
        type: "string"
        example: "~.codeSign.developers"
        readOnly: true
      createdAt:
        type: "string"
        readOnly: true
      updatedAt:
        type: "string"
        readOnly: true
      managedObjectsPermissions:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/RolePermission"
    description: "An ekm role"
  RoleListResponse:
    type: "object"
    properties:
      totalItems:
        type: "integer"
        format: "int32"
        readOnly: true
      limit:
        type: "integer"
        format: "int32"
        readOnly: true
      skip:
        type: "integer"
        format: "int32"
        readOnly: true
      items:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Role"
  RolePermission:
    type: "object"
    properties:
      objectGroup:
        type: "string"
      operations:
        type: "array"
        uniqueItems: true
        items:
          type: "string"
          enum:
          - "ACTIVATE"
          - "ADD_ATTRIBUTE"
          - "CREATE"
          - "CREATE_KEY_PAIR"
          - "DECRYPT"
          - "DELETE_ATTRIBUTE"
          - "DERIVE_KEY"
          - "DESTROY"
          - "DY_DERIVE"
          - "DY_GET_KEY_MATERIAL"
          - "DY_GET_SECRET_DATA"
          - "DY_UPDATE_DATA"
          - "ENCRYPT"
          - "MAC"
          - "MAC_VERIFY"
          - "MODIFY_ATTRIBUTE"
          - "REGISTER"
          - "REKEY"
          - "REKEY_KEY_PAIR"
          - "REVOKE"
          - "SIGN"
          - "SIGNATURE_VERIFY"
  Server:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The server name"
        readOnly: true
      host:
        type: "string"
        description: "The server host"
        readOnly: true
      role:
        type: "string"
        description: "The server role"
        readOnly: true
        enum:
        - "ENTRYPOINT"
        - "PARTNER"
        - "AUXILIARY"
      status:
        type: "string"
        description: "The server status"
        readOnly: true
        enum:
        - "RUNNING"
        - "STOPPED"
      os:
        type: "string"
        description: "The server operation system"
        readOnly: true
      cores:
        type: "integer"
        format: "int32"
        description: "The server amount of cores"
        readOnly: true
      cpuLoadPrecents:
        type: "integer"
        format: "int32"
        description: "The server CPU load"
        readOnly: true
      freeMemMegaBytes:
        type: "integer"
        format: "int32"
        description: "The server free Mega Bytes"
        readOnly: true
      totalMemMegaBytes:
        type: "integer"
        format: "int32"
        description: "The server total Mega Bytes"
        readOnly: true
      version:
        type: "string"
        description: "The server version"
        readOnly: true
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
      certificateInfo:
        description: "The server certificate info"
        readOnly: true
        $ref: "#/definitions/CertificateInfo"
    description: "A UKC server"
  SubjectKeyIdentifier:
    type: "object"
    required:
    - "isCritical"
    - "uid"
    properties:
      uid:
        type: "string"
        description: "Extension UID"
      isCritical:
        type: "boolean"
        description: "Is Extension Critical"
      keyId:
        type: "string"
        readOnly: true
    description: "Certificate x509 extension"
  SystemCertificate:
    type: "object"
    required:
    - "id"
    - "isCa"
    - "isSelfSigned"
    - "issuer"
    - "pkInfo"
    - "serial"
    - "sha1Thumbprint"
    - "signature"
    - "signatureAlgorithm"
    - "subject"
    - "uid"
    - "validFrom"
    - "validUntil"
    - "version"
    properties:
      id:
        type: "string"
        example: "my-certificate"
        description: "Certificate identifier label"
      role:
        type: "string"
        description: "The server certificate role (EP, PARTNER, AUXILIARY, ROOT_CA)"
        readOnly: true
        enum:
        - "ROOT_CA"
        - "ENTRYPOINT"
        - "PARTNER"
        - "AUXILIARY"
      subject:
        type: "string"
      validUntil:
        type: "string"
        description: "Date of of validity period end for this certificate"
      subjectAlternativeNames:
        description: "Subject Alternative Names Extension"
        $ref: "#/definitions/AlternativeNames"
      version:
        type: "string"
        example: "V3"
        description: "Certificate version"
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
      uid:
        type: "string"
      serial:
        type: "string"
        example: "185fb61e97f55b19"
        description: "Certificate serial number"
      signatureAlgorithm:
        type: "string"
        example: "sha256RSA"
        description: "Signing algorithm used for signing this certificate"
      issuer:
        type: "string"
        description: "The CA that signed this certificate"
      validFrom:
        type: "string"
        description: "Date of of validity period start for this certificate"
      pkInfo:
        $ref: "#/definitions/PKInfoType"
      basicConstraints:
        description: "Basic Constraints Extension"
        $ref: "#/definitions/BasicConstraints"
      subjectKeyIdentifier:
        description: "Subject Key Identifier Extension"
        $ref: "#/definitions/SubjectKeyIdentifier"
      authorityKeyIdentifier:
        description: "Authority Key Identifier Extension"
        $ref: "#/definitions/AuthorityKeyIdentifier"
      issuerAlternativeNames:
        description: "Issuer Alternative Names Extension"
        $ref: "#/definitions/AlternativeNames"
      extendedKeyUsage:
        description: "Extended Key Usage Extension"
        $ref: "#/definitions/ExtendedKeyUsage"
      sha1Thumbprint:
        type: "string"
        description: "certificate sha1"
      signature:
        type: "string"
        description: "CA signature value for this certificate"
      isCa:
        type: "boolean"
        description: "Determines if this certificate is a CA certificate"
      isSelfSigned:
        type: "boolean"
        description: "Determines if this certificate is a self signed certificate"
    description: "Certificate public information"
  SystemInfo:
    type: "object"
    properties:
      version:
        type: "string"
        example: "2.0.1"
        description: "UKC server version"
        readOnly: true
      lastActivityAt:
        type: "string"
        readOnly: true
      allowedOperations:
        type: "array"
        example: "{Create,Destroy,Sign,...}"
        description: "A list of operation Id's that represent the operations that\
          \ the current user is allowed to use. Should match the operation Id's as\
          \ specified in this document"
        readOnly: true
        items:
          type: "string"
      allowedPartitions:
        type: "array"
        example: "{part1, part2, ...}"
        description: "the partitions on which the user can contact them"
        readOnly: true
        items:
          type: "string"
      alerts:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/AlertsSummary"
    description: "Include information on UKC server"
  Token:
    type: "object"
    required:
    - "value"
    properties:
      value:
        type: "string"
        example: "U09Acm9vdDpQYXNzd29yZDEh"
        description: "The generated authentication token"
        minLength: 1
    description: "Auth Token"
  Topology:
    type: "object"
    properties:
      pairs:
        type: "array"
        description: "Pairs"
        readOnly: true
        items:
          $ref: "#/definitions/Pair"
      auxiliaries:
        type: "array"
        description: "Auxiliaries"
        readOnly: true
        items:
          $ref: "#/definitions/Server"
      triplets:
        type: "array"
        description: "Triplets"
        readOnly: true
        items:
          $ref: "#/definitions/Triplet"
    description: "A UKC server topology"
  Triplet:
    type: "object"
    properties:
      entryPoint:
        type: "string"
        description: "Entry Point name"
        readOnly: true
      partner:
        type: "string"
        description: "Partner name"
        readOnly: true
      auxiliary:
        type: "string"
        description: "Auxiliary name"
        readOnly: true
      connected:
        type: "boolean"
        description: "Is Triplet connected "
        readOnly: true
  UpdatedRole:
    type: "object"
    properties:
      managedObjectsPermissions:
        type: "array"
        items:
          $ref: "#/definitions/RolePermission"
  User:
    type: "object"
    properties:
      name:
        type: "string"
        example: "john_a"
        readOnly: true
      partition:
        type: "string"
        example: "~.codeSign.developers"
        readOnly: true
      role:
        type: "string"
        readOnly: true
      createdAt:
        type: "string"
        readOnly: true
      lastActivityAt:
        type: "string"
        readOnly: true
      retries:
        type: "integer"
        format: "int32"
        readOnly: true
      authType:
        type: "string"
        readOnly: true
        enum:
        - "STANDARD"
        - "LDAP"
      isLoginLocked:
        type: "boolean"
        readOnly: true
    description: "A UKC user"
  UserListResponse:
    type: "object"
    properties:
      totalItems:
        type: "integer"
        format: "int32"
        readOnly: true
      limit:
        type: "integer"
        format: "int32"
        readOnly: true
      skip:
        type: "integer"
        format: "int32"
        readOnly: true
      items:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/User"
