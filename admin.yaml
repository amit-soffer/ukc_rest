---
swagger: "2.0"
info:
  description: >-
    The Unbound Key Control ("UKC") Administration API enables management of UKC configuration and objects.


    # Authentication

    Most UKC API operations require an authorization context and user
    permissions. Users are identified by an authentication token attached to the
    request headers.

    
    ## Certificate Authentication
    
    Depending on UKC server setup, a request to the API may require a client 
    certificate. The certificate identifies the server or application connecting 
    with the UKC server. In UKC terms, this server is denoted as the UKC Client.

    
    Such certificates can be generated using the UKC CLI or UI tools, as well 
    as by the Administration API.

    
    Refer to the *UKC Users Guide* for further details on configuring client 
    certificate.


    ## Basic Authentication

    UKC supports the basic authentication scheme. The "Basic" HTTP
    authentication scheme is defined in  RFC 7617, which transmits credentials
    as user/password pairs, encoded using base64 in the HTTP Authorization
    header.


    The user ID can include the required partition in the format:

    `username@partitionId:password`

    ## Authentication Token

    The system can authenticate the user with a generated authentication token,
    which is valid for a limited time. This token eliminates the need to
    transmit the  username/password on every request. See `GET /authToken` for
    more information.

    ## Authentication Failure (unauthorized)

    If an operation is unauthorized, an HTTP 401 status code is returned with
    the `WWW-Authenticate` header.

    # Partitioning

    UKC objects are organized into partitions. Partitioning allows namespacing
    and access control to objects by configuring users with roles per partition.


    The objects contained in a partition are: 

    Users, Clients, Keys, Certificates, Secrets, and other partitions.

    ## Permissions

    Any partition can have many users who can access its objects.

    A partition user can have one of two security roles:

    - **so** - Security Officer. Can perform all operations on the partition
    objects including administration: adding, modifying and deleting objects.

    - **user** - Can only perform cryptographic operations with the partition
    objects, such as sign and verify, and can also edit keys, certificates and
    secrets.

    ## Root Partition

    The default built-in partition for an UKC cluster is called `root` and is
    created automatically when setting up a new UKC cluster. The `root` partition 
    contains all other partitions.

    ## Partition Hierarchy

    - __Parent partition__ - Any partition, _except_ the root partition, has one
    parent partition.

    - __Permissions inheritance__ - User access permissions can be configured to
    be _inherited_ from the parent partition. For example, a user `userA`, which
    is an SO on `partitionA`, would also have SO permissions on `partitionB` if
    `partitionB` is child of `partitionA`.
        - __Note:__ By default, access permissions are not inherited from the 
        parent partition. To use permission inheritance, it should be configured 
        explicitly.
      
    ## Default Partition Context

    For every request the _default partition_ is the home partition of the
    connected user.


    For example:
      - `so@root` - the default partition is the root partition.
      - `so@partitionA` - the default partition is `partitionA`.
      - `user@partitionA.partitionB` - the default partition is `partitionB`, 
      which is a child of `partitionA`.
      - `so@partitionB` - the default partition is `partitionB`, which is child 
      of the root partition.
      
    If a user of the root partition is executing an operation on an inherited 
    partition, the partition context should be set using the query parameter 
    *partition*, which is available for all relevant requests.
    
      
    # Object IDs

    Many operations require an object ID as part of the resource URI. Object ids
    can be one of:

    - An object __UUID__ where applicable. This ID is a server generated ID,
    which is unique per object type.
      - __Note:__ Objects of different types can have the same UUID. For example, 
      user A and key A. That is due to the fact that UUIDs are unique only per 
      object type.
    - An object relative or absolute path as specified above.

    # Quorum
    
    The UKC can be configured to require quorum approval for certain operations. 
    In case the operation you are executing requires it, the http result would 
    be 202 (ACCEPTED) and a quorum job object.
    
    
    Use the `jobs` API in order to manage approvals for different jobs.
    
    # Common Errors

    Any API call can result in one of the following general HTTP codes:

    - 500 - General server error.

    - 404 - Resource not found. Verify that the URL exists.

    - 401 - Unauthorized
  version: 2.0.1809
  title: UKC Admin API
  termsOfService: ''
  contact: {
    name: "UKC Admin API",
    url: "http://www.unboundtech.com",
    email: "support@unboundtech.com"
  }
  license: {
    name: ''
  }
tags:
- name: "Authentication"
- name: "Clients"
- name: "General"
- name: "Jobs"
- name: "Partitions"
- name: "System"
- name: "Users"
schemes:
- "https"
paths:
  /api/v1/authToken:
    get:
      tags:
      - "Authentication"
      summary: "Returns an authentication token that can be used in future calls\
        \ for authentication"
      description: "The user credentials are provided in the HTTP headers"
      operationId: "getAuthToken"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Token"
        401:
          description: "Authentication failure, the system could not verify the User/Password\
            \ passed in the request header"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/clients:
    get:
      tags:
      - "Clients"
      summary: "List clients"
      description: "Return a list of clients"
      operationId: "listClients"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        required: false
        type: "string"
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"                       
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Client"
      security:
      - basicAuth: []
      - Authorization: []
    post:
      tags:
      - "Clients"
      summary: "Creates a new client and returns its activation code"
      description: ""
      operationId: "createClient"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New Client"
        required: false
        schema:
          $ref: "#/definitions/NewClient"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ActivationCode"
        201:
          description: "New client created successfully"
          schema:
            $ref: "#/definitions/ActivationCode"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
        409:
          description: "Object already exists"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/clients/alerts:
    get:
      tags:
      - "Clients"
      summary: "Get client alerts summary"
      description: ""
      operationId: "getAlertsSummary"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AlertsSummary"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/clients/with-cert:
    post:
      tags:
      - "Clients"
      summary: "Creates a new client and returns its certificate"
      description: ""
      operationId: "createClientWithCertificate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/x-pkcs12"
      - "application/x-x509-user-cert"
      parameters:
      - in: "body"
        name: "body"
        description: "New Client"
        required: false
        schema:
          $ref: "#/definitions/NewClientWithCertificate"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "file"
        201:
          description: "New client created successfully"
        202:
          description: "ACCEPTED"
        409:
          description: "Object already exists"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/clients/{clientId}:
    get:
      tags:
      - "Clients"
      summary: "Get details of an existing client"
      description: "Return details of a client"
      operationId: "getClient"
      produces:
      - "application/json"
      parameters:
      - name: "clientId"
        in: "path"
        description: "Client ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Client"
      security:
      - basicAuth: []
      - Authorization: []
    delete:
      tags:
      - "Clients"
      summary: "Deletes a client"
      description: "Delete provided client"
      operationId: "deleteClient"
      produces:
      - "application/json"
      parameters:
      - name: "clientId"
        in: "path"
        description: "Client ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "Client deleted successfully."
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/clients/{clientId}/alerts:
    get:
      tags:
      - "Clients"
      summary: "Get details of an existing client"
      description: "Return details of a client"
      operationId: "getClientAlerts"
      produces:
      - "application/json"
      parameters:
      - name: "clientId"
        in: "path"
        description: "Client ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Alert"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/health:
    get:
      tags:
      - "General"
      summary: "Check if the UKC server is alive and functioning properly"
      description: "Return health status of the system, determines if it is usable,\
        \ as long as http return code is OK, system is usable"
      operationId: "getHealth"
      parameters: []
      responses:
        200:
          description: "OK"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/info:
    get:
      tags:
      - "General"
      summary: "Return system information"
      description: "Including version and supported capabilities. If authentication\
        \ is provided, returns also the allowed operations."
      operationId: "getSystemInfo"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SystemInfo"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/jobs/my/status:
    get:
      tags:
      - "Jobs"
      summary: "Get status of pending quorum requests"
      description: ""
      operationId: "getQuorumStatus"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/QuorumStatus"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/jobs/quorum:
    get:
      tags:
      - "Jobs"
      summary: "Get a list of pending quorum jobs"
      description: ""
      operationId: "getQuorumJobs"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/jobs/{jobId}:
    get:
      tags:
      - "Jobs"
      summary: "Get job data"
      description: ""
      operationId: "getQuorumJob"
      produces:
      - "application/json"
      parameters:
      - name: "jobId"
        in: "path"
        description: "Job ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
    delete:
      tags:
      - "Jobs"
      summary: "Delete a job"
      description: ""
      operationId: "deleteQuorumJob"
      parameters:
      - name: "jobId"
        in: "path"
        description: "Job ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/jobs/{jobId}/approve:
    post:
      tags:
      - "Jobs"
      summary: "Approve a pending quorum job"
      description: ""
      operationId: "approveJob"
      produces:
      - "application/json"
      parameters:
      - name: "jobId"
        in: "path"
        description: "Job ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/jobs/{jobId}/execute:
    post:
      tags:
      - "Jobs"
      summary: "Execute an approved quorum job"
      description: ""
      operationId: "executeJob"
      produces:
      - "application/json"
      parameters:
      - name: "jobId"
        in: "path"
        description: "Job ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/me/password:
    put:
      tags:
      - "Authentication"
      summary: "Change the password of the current user"
      description: "The current user credentials are provided in the HTTP headers.\
        \ Could be either password or JWT token"
      operationId: "changePassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New and existing password"
        required: false
        schema:
          $ref: "#/definitions/NewAndExistingPassword"
      responses:
        201:
          description: "Password changed successfully"
        400:
          description: "New password does not comply with password policy rules"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/partitions:
    get:
      tags:
      - "Partitions"
      summary: "Get a list of partitions"
      description: ""
      operationId: "listPartitions"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Partition"
      security:
      - basicAuth: []
      - Authorization: []
    post:
      tags:
      - "Partitions"
      summary: "Create a new partition"
      description: "Create a new logical partition. Can optionally create a default\
        \ client certificate for the new partition."
      operationId: "createPartition"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/x-pkcs12"
      - "application/x-x509-user-cert"
      parameters:
      - in: "body"
        name: "body"
        description: "The new partition"
        required: false
        schema:
          $ref: "#/definitions/NewPartition"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "file"
        201:
          description: "Partition created successfully. If initial client was specified,\
            \ the response includes the generated PFX in Base64 encoded DER format"
        409:
          description: "Object already exists"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/partitions/{partitionId}:
    get:
      tags:
      - "Partitions"
      summary: "Get partition info"
      description: ""
      operationId: "getPartition"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "path"
        description: "Partition Id"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Partition"
      security:
      - basicAuth: []
      - Authorization: []
    delete:
      tags:
      - "Partitions"
      summary: "Delete a partition"
      description: "Deletes a partition, the partition should not contain any keys\
        \ or clients in order to be deleted"
      operationId: "deletePartition"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "path"
        description: "The Id of the partition to delete. The partition name can be\
          \ used as the ID"
        required: true
        type: "string"
      responses:
        200:
          description: "Partition deleted successfully"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/partitions/{partitionId}/recover:
    put:
      tags:
      - "Partitions"
      summary: "Recover partition"
      description: ""
      operationId: "recoverPartition"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/x-pkcs12"
      - "application/x-x509-user-cert"
      parameters:
      - name: "partitionId"
        in: "path"
        description: "Partition Id"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "The recovered partition new client"
        required: false
        schema:
          $ref: "#/definitions/NewClientWithCertificate"
      responses:
        200:
          description: "Partition recovered successfully"
          schema:
            type: "file"
        409:
          description: "Object already exists"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/partitions/{partitionId}/settings:
    get:
      tags:
      - "Partitions"
      summary: "Get a list of configuration parameters for a partition"
      description: "Get all settings for a partition"
      operationId: "getPartitionSettings"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "path"
        description: "Partition Id/name of the target partition. Can be \\&quot;default\\\
          &quot; to use the default partition for the current authenticated user."
        required: true
        type: "string"
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/KeyValueEntry"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/partitions/{partitionId}/settings/{settingKey}:
    put:
      tags:
      - "Partitions"
      summary: "Updates one or more partition configuration parameters"
      description: "Use this method to change one or more settings for the partition."
      operationId: "updatePartitionSetting"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "path"
        required: true
        type: "string"
      - name: "settingKey"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Setting value"
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/random:
    get:
      tags:
      - "General"
      summary: "Return random bytes from the UKC server, by default returns 32 bytes,\
        \ unless size is specified"
      description: "The UKC random number generator is combined from different entropy\
        \ sources of the different servers in the UKC cluster"
      operationId: "generateRandom"
      produces:
      - "application/json"
      parameters:
      - name: "size"
        in: "query"
        description: "Size (in bytes) of random bytes to return"
        required: false
        type: "integer"
        default: 32
        maximum: 1024
        minimum: 32
        format: "int32"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/RandomEntropyBytes"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/random/entropy-bytes:
    put:
      tags:
      - "General"
      summary: "Add random bytes to the UKC entropy source"
      description: "Different clients can add entropy to the server. Collecting entropy\
        \ from the clients can enhance the strength of the UKC random number generator.\
        \ This function only adds entropy, i.e. if the provided value has no entropy,\
        \ it will not harm the generator quality"
      operationId: "addRandomEntropyBytes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Random bytes"
        required: false
        schema:
          $ref: "#/definitions/RandomEntropyBytes"
      responses:
        200:
          description: "OK"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/self.cer:
    get:
      tags:
      - "General"
      summary: "Return specific server certificate"
      description: "Download this specific server certificate. Used for registering\
        \ new servers"
      operationId: "selfCertGet"
      produces:
      - "application/x-x509-user-cert"
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "file"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/server-ca.p7b:
    get:
      tags:
      - "General"
      summary: "Return UKC root CA certificate"
      description: "Download the root CA certificate of UKC"
      operationId: "getCaCert"
      produces:
      - "application/x-pkcs7-certificates"
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "file"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/servers/new/auxiliary:
    get:
      tags:
      - "System"
      summary: "Get the new auxiliary server certificate"
      description: ""
      operationId: "getNewAuxiliary"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "host"
        in: "query"
        description: "Auxiliary host"
        required: true
        type: "string"
      - name: "port"
        in: "query"
        description: "Auxiliary port"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/NewServer"
      security:
      - basicAuth: []
      - Authorization: []
    post:
      tags:
      - "System"
      summary: "Adds a new auxiliary server"
      description: ""
      operationId: "addAuxServer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "the new auxiliary"
        required: false
        schema:
          $ref: "#/definitions/NewServer"
      - name: "force"
        in: "query"
        description: "Force"
        required: false
        type: "boolean"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/NewServer"
        201:
          description: "Auxiliary server added successfully"
          schema:
            $ref: "#/definitions/NewServer"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/servers/new/pair:
    get:
      tags:
      - "System"
      summary: "Get the new crypto server pair certificates"
      description: ""
      operationId: "getNewPair"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "ep_host"
        in: "query"
        description: "Entry point host"
        required: true
        type: "string"
      - name: "ep_port"
        in: "query"
        description: "Entry point port"
        required: false
        type: "integer"
        format: "int32"
      - name: "partner_host"
        in: "query"
        description: "Partner host"
        required: true
        type: "string"
      - name: "partner_port"
        in: "query"
        description: "Partner port"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/NewPair"
      security:
      - basicAuth: []
      - Authorization: []
    post:
      tags:
      - "System"
      summary: "Adds a new crypto server pair."
      description: ""
      operationId: "addServerPair"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New pair"
        required: false
        schema:
          $ref: "#/definitions/NewPair"
      - name: "force"
        in: "query"
        description: "Force"
        required: false
        type: "boolean"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/NewPair"
        201:
          description: "Pair added successfully"
          schema:
            $ref: "#/definitions/NewPair"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/servers/{serverId}:
    get:
      tags:
      - "System"
      summary: "Get detailed server information"
      description: ""
      operationId: "getServer"
      produces:
      - "application/json"
      parameters:
      - name: "serverId"
        in: "path"
        description: "The identifier of the server is it&#39;s url (escaped)"
        required: true
        type: "string"
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Server"
      security:
      - basicAuth: []
      - Authorization: []
    delete:
      tags:
      - "System"
      summary: "Remove a server or server pair from the UKC cluster"
      description: "Removes an Auxiliary server or server pair from UKC cluster. A\
        \ server pair is treated as one unit, identified by the host of its EntryPoint\
        \ server."
      operationId: "deleteServer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "serverId"
        in: "path"
        description: "The identifier of the server is its url. In case of server\
          \ pair, this should be the host of the EntryPoint server"
        required: true
        type: "string"
      responses:
        200:
          description: "Server deleted"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/system/certificates:
    get:
      tags:
      - "System"
      summary: "Get the server and root ca certificates"
      description: ""
      operationId: "getSystemCertificates"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SystemCertificate"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/system/certificates/alerts:
    get:
      tags:
      - "System"
      summary: "Get the server and root ca certificates"
      description: ""
      operationId: "getSystemAlerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AlertsSummary"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/system/certificates/{certificateId}:
    get:
      tags:
      - "System"
      summary: "Get a specific system certificate"
      description: ""
      operationId: "getSystemCertificate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "certificateId"
        in: "path"
        description: "Certificate ID"
        required: true
        type: "string"
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SystemCertificate"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/system/certificates/{certificateId}/alerts:
    get:
      tags:
      - "System"
      summary: "Get a specific system certificate alert"
      description: ""
      operationId: "getSystemCertificateAlerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "certificateId"
        in: "path"
        description: "Certificate ID"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SystemCertificate"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/system/settings:
    get:
      tags:
      - "System"
      summary: "Get UKC system configuration parameters"
      description: "Returns a list of key-value entries that represent the configuration\
        \ paraemeters for the UKC system"
      operationId: "getSettings"
      produces:
      - "application/json"
      parameters:
      - name: "detailed"
        in: "query"
        description: "detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/KeyValueEntry"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/system/settings/{settingKey}:
    put:
      tags:
      - "System"
      summary: "Sets one or more system configuration parameters"
      description: "Sets the value for one or more system configuration parameters"
      operationId: "setSettings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "settingKey"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Setting value"
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/topology:
    get:
      tags:
      - "System"
      summary: "Return the topology in the cluster including the server status"
      description: ""
      operationId: "getTopology"
      produces:
      - "application/json"
      parameters:
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Topology"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/users:
    get:
      tags:
      - "Users"
      summary: "List all users in a partition"
      description: "Return a list of all users in a partition"
      operationId: "listUsers"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
      security:
      - basicAuth: []
      - Authorization: []
    post:
      tags:
      - "Users"
      summary: "Creates a new user"
      description: "Create a new user in a given partition"
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New User"
        required: false
        schema:
          $ref: "#/definitions/NewUser"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        201:
          description: "User created successfully"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
        409:
          description: "Object already exists"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/users/{soId}/recover:
    put:
      tags:
      - "Users"
      summary: "Recover SO password"
      description: "Recover SO password. Root SO can recover for other SOs."
      operationId: "recoverSoPassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Password"
        required: false
        schema:
          $ref: "#/definitions/Password"
      - name: "soId"
        in: "path"
        description: "So ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: true
        type: "string"
      responses:
        200:
          description: "SO password recovered successfully"
        400:
          description: "New password does not comply with password policy rules"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/users/{userId}:
    get:
      tags:
      - "Users"
      summary: "Get details of an existing user"
      description: "Return details of a user"
      operationId: "getUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID to look for"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/User"
      security:
      - basicAuth: []
      - Authorization: []
    delete:
      tags:
      - "Users"
      summary: "Deletes a user"
      description: ""
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "User deleted successfully."
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/users/{userId}/password:
    put:
      tags:
      - "Users"
      summary: "Reset user password"
      description: "Reset user password, SO can reset it for users in his partition.\
        \ Root partition SO can reste it for SO of other partitions."
      operationId: "resetUserPassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Password"
        required: false
        schema:
          $ref: "#/definitions/Password"
      - name: "userId"
        in: "path"
        description: "User ID"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "User password reset successfully"
        400:
          description: "New password does not comply with password policy rules"
      security:
      - basicAuth: []
      - Authorization: []
securityDefinitions:
  Authorization:
    description: "For accessing the API a valid JWT token must be passed in all the\
      \ queries in\nthe 'Authorization' header.\nA valid JWT token is generated by\
      \ the API and retourned as answer of a call\nto the route /login giving a valid\
      \ user and password.\nThe following syntax must be \nused in the 'Authorization'\
      \ header :\n       Bearer: xxxxxx.yyyyyyy.zzzzzz"
    type: "apiKey"
    name: "Authorization"
    in: "header"
  basicAuth:
    type: "basic"
definitions:
  ActivationCode:
    type: "object"
    required:
    - "value"
    properties:
      value:
        type: "string"
        example: "123456"
        description: "Client activation code"
        minLength: 1
    description: "ActivationCode"
  Alert:
    type: "object"
    properties:
      alertType:
        type: "string"
        readOnly: true
        enum:
        - "CERT_ABOUT_TO_EXPIRE"
        - "CERT_EXPIRED"
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
      title:
        type: "string"
        readOnly: true
  AlertsSummary:
    type: "object"
    properties:
      category:
        type: "string"
        readOnly: true
        enum:
        - "CLIENTS"
        - "SYSTEM"
      alertType:
        type: "string"
        readOnly: true
        enum:
        - "CERT_ABOUT_TO_EXPIRE"
        - "CERT_EXPIRED"
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
      counter:
        type: "integer"
        format: "int32"
        readOnly: true
      title:
        type: "string"
        readOnly: true
  AlternativeNames:
    type: "object"
    required:
    - "isCritical"
    - "uid"
    properties:
      names:
        type: "array"
        items:
          type: "string"
      uid:
        type: "string"
        description: "Extension UID"
      isCritical:
        type: "boolean"
        description: "Is Extension Critical"
    description: "Certificate x509 extension"
  AuthorityKeyIdentifier:
    type: "object"
    required:
    - "isCritical"
    - "uid"
    properties:
      uid:
        type: "string"
        description: "Extension UID"
      isCritical:
        type: "boolean"
        description: "Is Extension Critical"
      keyId:
        type: "string"
        readOnly: true
      authNames:
        type: "array"
        items:
          type: "string"
      serialNumber:
        type: "string"
    description: "Certificate x509 extension"
  BasicConstraints:
    type: "object"
    required:
    - "isCritical"
    - "uid"
    properties:
      uid:
        type: "string"
        description: "Extension UID"
      isCritical:
        type: "boolean"
        description: "Is Extension Critical"
      pathLen:
        type: "integer"
        format: "int32"
      isCa:
        type: "boolean"
    description: "Certificate x509 extension"
  CertificateInfo:
    type: "object"
    required:
    - "id"
    - "isCa"
    - "isSelfSigned"
    - "issuer"
    - "pkInfo"
    - "serial"
    - "sha1Thumbprint"
    - "signature"
    - "signatureAlgorithm"
    - "subject"
    - "uid"
    - "validFrom"
    - "validUntil"
    - "version"
    properties:
      id:
        type: "string"
        example: "my-certificate"
        description: "Certificate identifier label"
      uid:
        type: "string"
      sha1Thumbprint:
        type: "string"
        description: "certificate sha1"
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
      version:
        type: "string"
        example: "V3"
        description: "Certificate version"
      serial:
        type: "string"
        example: "185fb61e97f55b19"
        description: "Certificate serial number"
      signatureAlgorithm:
        type: "string"
        example: "sha256RSA"
        description: "Sigining algorithm used for signing this certificate"
      issuer:
        type: "string"
        description: "The CA that signed this certificate"
      validFrom:
        type: "string"
        description: "Start date of validity period for this certificate"
      validUntil:
        type: "string"
        description: "End date of validity period for this certificate"
      subject:
        type: "string"
      pkInfo:
        $ref: "#/definitions/PKInfoType"
      basicConstraints:
        description: "Basic Constraints Extension"
        $ref: "#/definitions/BasicConstraints"
      subjectKeyIdentifier:
        description: "Subject Key Identifier Extension"
        $ref: "#/definitions/SubjectKeyIdentifier"
      authorityKeyIdentifier:
        description: "Authority Key Identifier Extension"
        $ref: "#/definitions/AuthorityKeyIdentifier"
      subjectAlternativeNames:
        description: "Subject Alternative Names Extension"
        $ref: "#/definitions/AlternativeNames"
      issuerAlternativeNames:
        description: "Issuer Alternative Names Extension"
        $ref: "#/definitions/AlternativeNames"
      extendedKeyUsage:
        description: "Extended Key Usage Extension"
        $ref: "#/definitions/ExtendedKeyUsage"
      signature:
        type: "string"
        description: "CA signature value for this certificate"
      isCa:
        type: "boolean"
        description: "Determines if this certificate is a CA certificate"
      isSelfSigned:
        type: "boolean"
        description: "Determines if this certificate is a self-signed certificate"
    description: "Certificate public information"
  Client:
    type: "object"
    properties:
      name:
        type: "string"
        example: "client-name"
        description: "Client name"
        readOnly: true
      partition:
        type: "string"
        example: "~.codeSign.developers"
        readOnly: true
      activationStatus:
        type: "string"
        description: "Client activation status"
        readOnly: true
        enum:
        - "ACTIVATED"
        - "PENDING"
      activationType:
        type: "string"
        description: "Client activation type"
        readOnly: true
        enum:
        - "CERTIFICATE_REQUEST"
        - "ACTIVATION_CODE"
        - "CERTIFICATE_DOWNLOAD"
        - "EXTERNAL"
      lastUpdatedAt:
        type: "string"
        description: "Last update time for this client record"
        readOnly: true
      failedActivationCounter:
        type: "integer"
        format: "int32"
        description: "Number of failed retries to use client activation code"
        readOnly: true
      isActivationLocked:
        type: "boolean"
        readOnly: true
      checkIp:
        type: "boolean"
        description: "Enforce client ip verification"
      allowNat:
        type: "boolean"
        description: "Allow client use NAT"
      certificateInfo:
        description: "Client certificate info"
        $ref: "#/definitions/CertificateInfo"
      certExpiresAt:
        type: "string"
        description: "Client certificate expiration date"
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
      version:
        type: "string"
        description: "Client version"
    description: "A UKC new client"
  ECCBipKeyInfo:
    type: "object"
    properties:
      level:
        type: "string"
        format: "byte"
        description: "level (0 for master)"
        readOnly: true
      childNumber:
        type: "integer"
        format: "int32"
        description: "child number"
        readOnly: true
      hardened:
        type: "boolean"
        description: "is hardened or not"
        readOnly: true
      chainCode:
        type: "string"
        description: "BASE64 chain code"
        readOnly: true
      parentUid:
        type: "string"
        description: "the parent uid"
        readOnly: true
      parentFingerprint:
        type: "integer"
        format: "int32"
        description: "parent fingerprint (The first 32 bits of the identifier)"
        readOnly: true
  ECCKeyInfoType:
    type: "object"
    required:
    - "curve"
    - "ecPoint"
    - "eccBipKeyInfo"
    properties:
      curve:
        type: "string"
        enum:
        - "P256"
        - "P384"
        - "P521"
        - "SECP_256K_1"
      ecPoint:
        type: "string"
        description: "Encoded public key (EC point)"
      eccBipKeyInfo:
        description: "ECC bip info"
        $ref: "#/definitions/ECCBipKeyInfo"
    description: "Details of ECC public key"
  ExtendedKeyUsage:
    type: "object"
    required:
    - "isCritical"
    - "uid"
    properties:
      keyUsages:
        type: "array"
        items:
          type: "string"
      uid:
        type: "string"
        description: "Extension UID"
      isCritical:
        type: "boolean"
        description: "Is Extension Critical"
    description: "Certificate x509 extension"
  Job:
    type: "object"
    properties:
      initiator:
        type: "string"
        example: "so@root"
        readOnly: true
      id:
        type: "string"
        example: "389323ee-3588-416e-94bd-f93ca815762e"
        readOnly: true
      title:
        type: "string"
        readOnly: true
      opName:
        type: "string"
        example: "PARTITION_CONFIG_SET "
        readOnly: true
      createdAt:
        type: "string"
        readOnly: true
      expiresAt:
        type: "string"
        readOnly: true
      opParams:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/KeyValueEntry"
      response:
        type: "string"
        readOnly: true
      approvedBy:
        type: "array"
        readOnly: true
        items:
          type: "string"
      status:
        type: "string"
        readOnly: true
        enum:
        - "PENDING_APPROVAL"
        - "PENDING_EXECUTION"
        - "DONE"
        - "EXPIRED"
      totalRequiredApprovals:
        type: "integer"
        format: "int32"
        readOnly: true
    description: "An asynchronous job"
  KeyValueEntry:
    type: "object"
    required:
    - "key"
    - "value"
    properties:
      key:
        type: "string"
        minLength: 1
      value:
        type: "string"
      description:
        type: "string"
        description: "quorum timeout"
        readOnly: true
      type:
        type: "string"
        description: "value type"
        readOnly: true
        enum:
        - "BOOLEAN"
        - "TEXT"
        - "INTEGER"
        - "ARRAY"
        - "MAP"
        - "CERTIFICATE"
      defaultValue:
        type: "string"
        description: "default value"
        readOnly: true
      min:
        type: "integer"
        format: "int32"
        description: "minimum value"
        readOnly: true
      max:
        type: "integer"
        format: "int32"
        description: "maximum value"
        readOnly: true
      unit:
        type: "string"
        description: "unit type"
        readOnly: true
        enum:
        - "SECONDS"
        - "MINUTES"
        - "HOURS"
        - "DAYS"
        - "MONTHS"
        - "YEARS"
        - "CHARACTERS"
    description: "Key value entry"
  NewAndExistingPassword:
    type: "object"
    required:
    - "existingPassword"
    - "newPassword"
    properties:
      existingPassword:
        type: "string"
        description: "The existing user password"
        minLength: 1
      newPassword:
        type: "string"
        description: "The new password"
        minLength: 1
    description: "New And Existing Password"
  NewClient:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "client-name"
        description: "Client name"
        minLength: 1
      checkIp:
        type: "boolean"
        description: "Enforce client ip verification"
      allowNat:
        type: "boolean"
        description: "Allow client use NAT"
  NewClientWithCertificate:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "clinet-name"
        description: "Client name"
        minLength: 1
      checkIp:
        type: "boolean"
        description: "Enforce client ip verification"
      allowNat:
        type: "boolean"
        description: "Allow client use NAT"
      alternativeNames:
        type: "array"
        example: "{client-ip,client-name}"
        description: "Client alternative names"
        items:
          type: "string"
      pfxPassword:
        type: "string"
        description: "The new client PFX password"
      csr:
        type: "string"
        example: "MIIByjCCATMCAQAwgYkxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlh\n\
          MRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRMwEQYDVQQKEwpHb29nbGUgSW5jMR8w\nHQYDVQQLExZJbmZvcm1hdGlvbiBUZWNobm9sb2d5MRcwFQYDVQQDEw53d3cuZ29v\n\
          Z2xlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEApZtYJCHJ4VpVXHfV\nIlstQTlO4qC03hjX+ZkPyvdYd1Q4+qbAeTwXmCUKYHThVRd5aXSqlPzyIBwieMZr\n\
          WFlRQddZ1IzXAlVRDWwAo60KecqeAXnnUK+5fXoTI/UgWshre8tJ+x/TMHaQKR/J\ncIWPhqaQhsJuzZbvAdGA80BLxdMCAwEAAaAAMA0GCSqGSIb3DQEBBQUAA4GBAIhl\n\
          4PvFq+e7ipARgI5ZM+GZx6mpCz44DTo0JkwfRDf+BtrsaC0q68eTf2XhYOsq4fkH\nQ0uA0aVog3f5iJxCa3Hp5gxbJQ6zV6kJ0TEsuaaOhEko9sdpCoPOnRBm2i/XRD2D\n\
          6iNh8f8z0ShGsFqjDgFHyF3o+lUyj+UC6H1QW7bn"
        description: "The new client Base64 encoded Certificate Request"
  NewPair:
    type: "object"
    required:
    - "entryPoint"
    - "partner"
    properties:
      entryPoint:
        description: "Entry Point"
        $ref: "#/definitions/NewServer"
      partner:
        description: "Partner"
        $ref: "#/definitions/NewServer"
    description: "A UKC pair"
  NewPartition:
    type: "object"
    required:
    - "name"
    - "newClient"
    - "soPassword"
    properties:
      name:
        type: "string"
        description: "The new partition name"
        minLength: 1
      soPassword:
        type: "string"
        description: "The new partition SO password"
        minLength: 1
      newClient:
        description: "The initial partition client"
        $ref: "#/definitions/NewClientWithCertificate"
      inherit:
        type: "boolean"
        description: "Inherit root partition settings"
      propagate:
        type: "boolean"
        description: " Support certificate propagation"
    description: "A UKC partition"
  NewServer:
    type: "object"
    required:
    - "host"
    properties:
      host:
        type: "string"
        example: "ip or fqdn"
        description: "The server host"
        minLength: 1
      port:
        type: "integer"
        format: "int32"
        example: 8443
        description: "The server port"
      newServerCertificate:
        description: "The new server certificate"
        $ref: "#/definitions/NewServerCertificate"
    description: "A new UKC server"
  NewServerCertificate:
    type: "object"
    properties:
      certificate:
        type: "string"
        description: "The server certificate encoded in base64"
      certificateFingerprint:
        type: "string"
        description: "The server certificate fingerprint"
      certificateInfo:
        type: "string"
        description: "The server certificate info"
    description: "New server certificate data"
  NewUser:
    type: "object"
    required:
    - "name"
    - "role"
    properties:
      password:
        type: "string"
        description: "The user password"
      name:
        type: "string"
        example: "john_a"
        minLength: 1
      description:
        type: "string"
        description: "The user description"
      role:
        type: "string"
        description: "The user role"
        enum:
        - "SO"
        - "USER"
    description: "A UKC new user"
  PKInfoType:
    type: "object"
    properties:
      rsa:
        $ref: "#/definitions/RSAKeyInfoType"
      ecc:
        $ref: "#/definitions/ECCKeyInfoType"
    description: "Properties of the PKI key"
  Pair:
    type: "object"
    properties:
      entryPoint:
        description: "Entry Point"
        readOnly: true
        $ref: "#/definitions/Server"
      partner:
        description: "Partner"
        readOnly: true
        $ref: "#/definitions/Server"
    description: "A UKC pair"
  Partition:
    type: "object"
    properties:
      checkClientIp:
        type: "boolean"
        description: "Check clients IP"
        readOnly: true
      name:
        type: "string"
        example: "root"
        readOnly: true
      allowNat:
        type: "boolean"
        description: "Is NAT allowed"
        readOnly: true
      allowUserOnlyCryptoOperations:
        type: "boolean"
        description: "Is user allowed to do only crypto"
        readOnly: true
      clientRetriesLimit:
        type: "integer"
        format: "int32"
        description: "client retries limit"
        readOnly: true
      clientRetriesTimeout:
        type: "integer"
        format: "int32"
        description: "Client retries timeout"
        readOnly: true
      creationDate:
        type: "string"
        description: "Partition creation date"
        readOnly: true
      lastUpdate:
        type: "string"
        description: "Partition last update"
        readOnly: true
      passwordComplexity:
        type: "boolean"
        description: "Enforce password complexity"
        readOnly: true
      passwordLength:
        type: "integer"
        format: "int32"
        description: "Partition allowed password length"
        readOnly: true
      quorumOperations:
        type: "string"
        description: "Quorum operations"
        readOnly: true
      quorumSize:
        type: "integer"
        format: "int32"
        description: "Quorum size"
        readOnly: true
      quorumTimeout:
        type: "integer"
        format: "int32"
        description: "Quorum timeout"
        readOnly: true
      supportCertificatePropagation:
        type: "boolean"
        description: "Enable support certificate propagation"
        readOnly: true
      supportPartitionInheritance:
        type: "boolean"
        description: "Enable support certificate inheritance"
        readOnly: true
      userRetriesLimit:
        type: "integer"
        format: "int32"
        description: "User retries limit"
        readOnly: true
      jWTExpiration:
        type: "integer"
        format: "int32"
        description: "JWT expiration time"
        readOnly: true
    description: "A partition is used as a logical container for security objects,\
      \ such as keys and certificates"
  Password:
    type: "object"
    required:
    - "password"
    properties:
      password:
        type: "string"
        example: "Password2!"
        description: "New user password"
        minLength: 1
    description: "A password"
  QuorumStatus:
    type: "object"
    properties:
      pendingApproval:
        type: "integer"
        format: "int32"
        example: 2
        readOnly: true
      pendingExecution:
        type: "integer"
        format: "int32"
        example: 0
        readOnly: true
    description: "Quorum jobs status"
  RSAKeyInfoType:
    type: "object"
    required:
    - "modulus"
    - "publicExponent"
    properties:
      publicExponent:
        type: "string"
        description: "HEX encoded exponent"
      modulus:
        type: "string"
        description: "HEX encoded modulus"
    description: "Details of RSA public key"
  RandomEntropyBytes:
    type: "object"
    required:
    - "entropy"
    properties:
      entropy:
        type: "string"
        description: "base64 encoded entropy bytes"
        minLength: 1
    description: "Random Entropy Bytes"
  Server:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The server name"
        readOnly: true
      host:
        type: "string"
        description: "The server host"
        readOnly: true
      role:
        type: "string"
        description: "The server role"
        readOnly: true
        enum:
        - "ENTRYPOINT"
        - "PARTNER"
        - "AUXILIARY"
      status:
        type: "string"
        description: "The server status"
        readOnly: true
        enum:
        - "RUNNING"
        - "STOPPED"
      os:
        type: "string"
        description: "The server operation system"
        readOnly: true
      cores:
        type: "integer"
        format: "int32"
        description: "The server amount of cores"
        readOnly: true
      cpuLoadPrecents:
        type: "integer"
        format: "int32"
        description: "The server CPU load"
        readOnly: true
      freeMemMegaBytes:
        type: "integer"
        format: "int32"
        description: "The server free Mega Bytes"
        readOnly: true
      totalMemMegaBytes:
        type: "integer"
        format: "int32"
        description: "The server total Mega Bytes"
        readOnly: true
      version:
        type: "string"
        description: "The server version"
        readOnly: true
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
      certificateInfo:
        description: "The server certificate info"
        readOnly: true
        $ref: "#/definitions/CertificateInfo"
    description: "A UKC server"
  SubjectKeyIdentifier:
    type: "object"
    required:
    - "isCritical"
    - "uid"
    properties:
      uid:
        type: "string"
        description: "Extension UID"
      isCritical:
        type: "boolean"
        description: "Is extension critical"
      keyId:
        type: "string"
        readOnly: true
    description: "Certificate x509 extension"
  SystemCertificate:
    type: "object"
    required:
    - "id"
    - "isCa"
    - "isSelfSigned"
    - "issuer"
    - "pkInfo"
    - "serial"
    - "sha1Thumbprint"
    - "signature"
    - "signatureAlgorithm"
    - "subject"
    - "uid"
    - "validFrom"
    - "validUntil"
    - "version"
    properties:
      id:
        type: "string"
        example: "my-certificate"
        description: "Certificate identifier label"
      role:
        type: "string"
        description: "The server certificate role (EP,PARTNER,AUXILIARY,ROOT_CA)"
        readOnly: true
        enum:
        - "ROOT_CA"
        - "ENTRYPOINT"
        - "PARTNER"
        - "AUXILIARY"
      subject:
        type: "string"
      validUntil:
        type: "string"
        description: "The certificate is valid until this date"
      subjectAlternativeNames:
        description: "Subject Alternative Names Extension"
        $ref: "#/definitions/AlternativeNames"
      version:
        type: "string"
        example: "V3"
        description: "Certificate version"
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
      uid:
        type: "string"
      serial:
        type: "string"
        example: "185fb61e97f55b19"
        description: "Certificate serial number"
      signatureAlgorithm:
        type: "string"
        example: "sha256RSA"
        description: "Sigining algorithm used for signing this certificate"
      issuer:
        type: "string"
        description: "The CA that signed this certificate"
      validFrom:
        type: "string"
        description: "The certificate is valid starting from this date"
      pkInfo:
        $ref: "#/definitions/PKInfoType"
      basicConstraints:
        description: "Basic Constraints Extension"
        $ref: "#/definitions/BasicConstraints"
      subjectKeyIdentifier:
        description: "Subject Key Identifier Extension"
        $ref: "#/definitions/SubjectKeyIdentifier"
      authorityKeyIdentifier:
        description: "Authority Key Identifier Extension"
        $ref: "#/definitions/AuthorityKeyIdentifier"
      issuerAlternativeNames:
        description: "Issuer Alternative Names Extension"
        $ref: "#/definitions/AlternativeNames"
      extendedKeyUsage:
        description: "Extended Key Usage Extension"
        $ref: "#/definitions/ExtendedKeyUsage"
      sha1Thumbprint:
        type: "string"
        description: "certificate sha1"
      signature:
        type: "string"
        description: "CA signature value for this certificate"
      isCa:
        type: "boolean"
        description: "Determines if this certificate is a CA certificate"
      isSelfSigned:
        type: "boolean"
        description: "Determines if this certificate is a self-signed certificate"
    description: "Certificate public information"
  SystemInfo:
    type: "object"
    properties:
      version:
        type: "string"
        example: "2.0.1"
        description: "UKC server version"
        readOnly: true
      allowedOperations:
        type: "array"
        example: "{Create,Destroy,Sign,...}"
        description: "A list of operation IDs that represent the operations that\
          \ the current user is allowed to use. Should match the operation IDs as\
          \ specified in this document"
        readOnly: true
        items:
          type: "string"
      allowedPartitions:
        type: "array"
        example: "{part1,parr2,...}"
        description: "The partitions on which the user can contact them"
        readOnly: true
        items:
          type: "string"
      alerts:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/AlertsSummary"
    description: "Include information on UKC server"
  Token:
    type: "object"
    required:
    - "value"
    properties:
      value:
        type: "string"
        example: "U09Acm9vdDpQYXNzd29yZDEh"
        description: "The generated authentication token"
        minLength: 1
    description: "Auth Token"
  Topology:
    type: "object"
    properties:
      pairs:
        type: "array"
        description: "Pairs"
        readOnly: true
        items:
          $ref: "#/definitions/Pair"
      auxiliaries:
        type: "array"
        description: "Auxiliaries"
        readOnly: true
        items:
          $ref: "#/definitions/Server"
    description: "UKC server topology"
  User:
    type: "object"
    properties:
      name:
        type: "string"
        example: "john_a"
        readOnly: true
      partition:
        type: "string"
        example: "~.codeSign.developers"
        readOnly: true
      role:
        type: "string"
        readOnly: true
        enum:
        - "SO"
        - "USER"
      createdAt:
        type: "string"
        readOnly: true
      internal:
        type: "boolean"
        readOnly: true
      retries:
        type: "integer"
        format: "int32"
        readOnly: true
      isLoginLocked:
        type: "boolean"
        readOnly: true
    description: "A UKC user"
