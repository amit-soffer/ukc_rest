---
swagger: "2.0"
info:
  description: "The Unbound Key Control Crypto API provides cryptographic services\
    \ used with keys\nmanaged by UKC.\n\n\n# UKC API Overview\n\n\n## Authentication\
    \ Types\n\nMost UKC API operations require an authorization context and user\n\
    permissions. Users are identified by an authentication token attached to the\n\
    request headers.\n\n### Basic Authentication\n\nUKC supports the basic authentication\
    \ scheme. The \"Basic\" HTTP\nauthentication scheme is defined in  RFC 7617, which\
    \ transmits credentials\nas user/password pairs, encoded using base64 in the HTTP\
    \ Authorization\nheader.\n\n\nThe user ID can include the required partition in\
    \ the format:\n\n`username@partitionId:password`\n\n### Authentication Token\n\
    \nThe system can authenticate the user with a generated authentication token,\n\
    which is valid for a limited time. This token eliminates the need to\ntransmit\
    \ the  username/password on every request. See `GET /authToken` for\nmore information.\n\
    \n### Authentication with a Certificate\n\nThe client can authenticate with the\
    \ UKC using a client certificate. This method can be useful to either add another\
    \ layer of security or when you do not desire to use a username and password.\n\
    \n### Authentication Failure (unauthorized)\n\nIf an operation is unauthorized,\
    \ an HTTP 401 status code is returned with\nthe `WWW-Authenticate` header.\n\n\
    ## Partitioning\n\nUKC objects are organized into partitions. Partitioning allows\
    \ namespacing\nand access control to objects by configuring users with roles per\
    \ partition.\n\n\nThe objects contained in a partition are: \n\nUsers, Clients,\
    \ Keys, Certificates, Secrets and other partitions\n\n### Permissions\n\nAny partition\
    \ can have many users who can access its objects.\n\nA partition user can have\
    \ one of two security roles:\n\n- **so** - Security Officer. Can perform all operations\
    \ on the partition\nobjects including administration: adding, modifying and deleting\
    \ objects.\n\n- **user** - Can only perform cryptographic operations with the\
    \ partition\nobjects, such as sign and verify, and can also edit keys, certificates\
    \ and\nsecrets.\n\n### Root Partition\n\nThe default built-in partition for an\
    \ UKC cluster is called `root` and is\ncreated automatically when setting up a\
    \ new UKC cluster.\n\n### Partition Hierarchy\n\n- __Parent partition__ - Any\
    \ partition, _except_ the root partition, has one\nparent partition.\n\n- __Permissions\
    \ inheritance__ - User access permissions can be configured to\nbe _inherited_\
    \ from the parent partition. For example, a user `userA`, which\nis an SO on `partitionA`,\
    \ would also have SO permissions on `partitionB` if\n`partitionB` is child of\
    \ `partitionA`.\n\t- __Note:__ By default, access permissions are not inherited\
    \ from the parent partition. To use permission inheritance, it should be configured\
    \ explicitly.\n  \n### Default Partition Context\n\nFor every request the _default\
    \ partition_ is the home partition of the\nconnected user.\n\n\nFor example:\n\
    \  - `so@partitionA` - the default partition is `partitionA`.\n  - `user@partitionA.partitionB`\
    \ - the default partition is `partitionB`, which is a child of `partitionA`.\n\
    \  - `so@partitionB` - the default partition is `partitionB`, which is child of\
    \ the root partition.\n  \n### Object Path\n\n- A UKC object, such as User or\
    \ Key, can be referenced by its unique object\npath, which may be absolute or\
    \ relative to the default partition.\n\n- The object path is unique per object\
    \ type. Therefore, within one partition\nthere can be two objects represented\
    \ by the same path, one is a key and one\nis a user.\n\n- UKC object path is composed\
    \ of a series of path components separated by\nthe dot character (`.`).\n\n- A\
    \ path component may represent a partition name or object name.\n  - The last\
    \ component in a path is an object name.\n- An absolute path starts with the tilde\
    \ character `~` which represents the\nroot partition.\n  - For example, to delete\
    \ a key named `keyA` that is contained in a partition `partitionC`:\n  `DELETE\
    \ https://myukcserver.com/keys/~.partitionC.keyA`\n- A relative path uses the\
    \ current default partition as the root of the\nspecified path. \n  - If a user\
    \ is logged in as `so@partitionC`, he can perform the same delete action as in\
    \ the previous example with:\n  `DELETE https://myukcserver.com/keys/keyA`.\n\
    \  - If the user is logged in as `so@root`, he can use the following as its relative\
    \ to the root partition:\n  `DELETE https://myukcserver.com/keys/partitionC.keyA`\
    \ \n  \n## Object IDs\n\nMany operations require an object ID as part of the resource\
    \ URI. Object ids\ncan be one of:\n\n- An object __UUID__ where applicable. This\
    \ ID is a server generated ID,\nwhich is unique per object type.\n  - __Note:__\
    \ Objects of different types can have the same UUID. For example, user A and key\
    \ A. That is due to the fact that UUIDs are unique only per object type.\n- An\
    \ object relative or absolute path as specified above.\n\n## Quorum\n\nThe UKC\
    \ can be configured to require quorum approval for certain operations. In case\
    \ the operation you are executing requires it, the http result would be 202 (ACCEPTED)\
    \ and a quorum job object.\n\nUse the `jobs` API in order to manage approvals\
    \ for different jobs.\n\n## Common Errors\n\nAny API call can result in one of\
    \ the following general HTTP codes:\n- 500 - General server error.\n- 404 - Resource\
    \ not found. Verify that the URL exists.\n- 401 - Unauthorized"
  version: "2.0.2004"
  title: "Unbound Key Control Server"
  contact:
    name: "Contact"
    url: "https://www.unboundtech.com"
    email: "support@unboundtech.com"
tags:
- name: "General"
- name: "Keys"
- name: "Secrets"
schemes:
- "https"
paths:
  /api/v1/health:
    get:
      tags:
      - "General"
      summary: "Check UKC health"
      description: "Return health status of the UKC system and determine if it is\
        \ usable. As long as the HTTP return code is OK, the system is usable."
      operationId: "getHealth"
      parameters:
      - name: "pairOnly"
        in: "query"
        description: "pairOnly"
        required: false
        type: "boolean"
        default: false
      - name: "timeout"
        in: "query"
        description: "Timeout"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
  /api/v1/info:
    get:
      tags:
      - "General"
      summary: "Get system information"
      description: "Return system information, including version and supported capabilities.\
        \ If authentication is provided, it returns the allowed operations."
      operationId: "getSystemInfo"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SystemInfo"
  /api/v1/keys:
    get:
      tags:
      - "Keys"
      summary: "List keys"
      description: "Return a list of keys."
      operationId: "listKeys"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Limit"
        required: false
        type: "integer"
        format: "int32"
      - name: "skip"
        in: "query"
        description: "skip"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "id"
        in: "query"
        description: "Key id"
        required: false
        type: "string"
      - name: "type"
        in: "query"
        description: "Key type"
        required: false
        type: "string"
        enum:
        - "RSA"
        - "ECC"
        - "AES"
        - "TDES"
        - "HMAC"
        - "SIV"
        - "XTS"
        - "PRF"
        - "PWD"
        - "LIMA"
        - "EDDSA"
      - name: "exportType"
        in: "query"
        description: "exportType"
        required: false
        type: "string"
        enum:
        - "IN_PLAIN"
        - "WRAPPED"
        - "WRAPPED_WITH_TRUSTED"
        - "NON_EXPORTABLE"
      - name: "trusted"
        in: "query"
        description: "Is Trusted"
        required: false
        type: "boolean"
      - name: "groups"
        in: "query"
        description: "Groups"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "state"
        in: "query"
        description: "Key state"
        required: false
        type: "string"
        enum:
        - "PREACTIVE"
        - "ACTIVE"
        - "DEACTIVATED"
        - "COMPROMISED"
        - "DESTROYED"
        - "DESTROYED_COMPROMISED"
      - name: "isEnabled"
        in: "query"
        description: "Is Enabled"
        required: false
        type: "boolean"
      - name: "showDestroyed"
        in: "query"
        description: "Include destroyed objects"
        required: false
        type: "boolean"
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/KeyInfoListResponse"
          headers:
            X-total-count:
              type: "integer"
              format: "int32"
              description: "total amount of keys"
      security:
      - basicAuth: []
      - Authorization: []
    post:
      tags:
      - "Keys"
      summary: "Import key"
      description: "Import a key based on the given file."
      operationId: "importKey"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "key file"
        required: true
        type: "file"
      - name: "id"
        in: "formData"
        description: "key id"
        required: true
        type: "string"
      - name: "idEncoding"
        in: "formData"
        description: "key id encoding"
        required: false
        type: "string"
      - name: "password"
        in: "formData"
        description: "password for the file if required"
        required: false
        type: "string"
      - name: "description"
        in: "formData"
        description: "key description"
        required: false
        type: "string"
      - name: "usage"
        in: "formData"
        description: "key usage"
        required: false
        type: "string"
      - name: "exportType"
        in: "formData"
        description: "Export Type"
        required: false
        type: "string"
      - name: "trusted"
        in: "formData"
        description: "trusted (yes or no)"
        required: false
        type: "boolean"
      - name: "groups"
        in: "formData"
        description: "List of groups"
        required: false
        type: "string"
      - name: "keyOnly"
        in: "formData"
        description: "import only key (no chain)"
        required: false
        type: "boolean"
      - name: "isSymmetric"
        in: "formData"
        description: "is key is symmetric"
        required: false
        type: "boolean"
      - name: "symmetricKeyType"
        in: "formData"
        description: "the symmetric key type"
        required: false
        type: "string"
      - name: "testMode"
        in: "formData"
        description: "get key info without importing"
        required: false
        type: "boolean"
      - name: "keyRotationInterval"
        in: "formData"
        description: "key rotation interval (days)"
        required: false
        type: "integer"
      - name: "activate"
        in: "formData"
        description: "activate the key"
        required: false
        type: "Boolean"
      - name: "activationDate"
        in: "formData"
        description: "Activation Date"
        required: false
        type: "DateParameter"
      - name: "deactivationDate"
        in: "formData"
        description: "Deactivation Date"
        required: false
        type: "DateParameter"
      responses:
        201:
          description: "Key generated successfully"
          schema:
            $ref: "#/definitions/KeyInfo"
        409:
          description: "Object already exist"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/alerts:
    get:
      tags:
      - "Keys"
      summary: "Get key alerts summary"
      description: "Get a summary of key alerts."
      operationId: "getAlertsSummary"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AlertsSummary"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/generate:
    post:
      tags:
      - "Keys"
      summary: "Generate key"
      description: "Generate a new asymmetric or symmetric key. The key format is\
        \ provided as a parameter. <p>For example, to create a 256-bit AES symmetric\
        \ key, use the parameters: <br /><code>{<br />&nbsp; &nbsp;\"keyId\":\"AES-KEY\"\
        ,<br />&nbsp; &nbsp;\"keyFormat\": {<br />&nbsp; &nbsp; &nbsp; &nbsp;\"type\"\
        : \"AES\", \"size\": \"256\"<br />&nbsp; &nbsp;}<br />}<br /></code><p>The\
        \ keyFormat type can be: RSA, ECC, AES, TDES, HMAC, SIV, XTS, PRF, PWD, LIMA,\
        \ or EDDSA</p>"
      operationId: "generateKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - in: "body"
        name: "body"
        description: "The new key"
        required: false
        schema:
          $ref: "#/definitions/NewGeneratedKey"
      responses:
        201:
          description: "Key generated successfully"
          schema:
            $ref: "#/definitions/KeyInfo"
        409:
          description: "Object already exist"
          schema:
            $ref: "#/definitions/KeyInfo"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/groups:
    get:
      tags:
      - "Keys"
      summary: "Get key groups"
      description: "Get key groups."
      operationId: "getKeysGroups"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "operations"
        in: "query"
        description: "Operations"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "ACTIVATE"
          - "ADD_ATTRIBUTE"
          - "CREATE"
          - "CREATE_KEY_PAIR"
          - "DECRYPT"
          - "DELETE_ATTRIBUTE"
          - "DERIVE_KEY"
          - "DESTROY"
          - "DELETE"
          - "DY_DERIVE"
          - "DY_GET_KEY_MATERIAL"
          - "DY_GET_SECRET_DATA"
          - "DY_UPDATE_DATA"
          - "ENCRYPT"
          - "MAC"
          - "MAC_VERIFY"
          - "MODIFY_ATTRIBUTE"
          - "REGISTER"
          - "REKEY"
          - "REKEY_KEY_PAIR"
          - "REVOKE"
          - "SIGN"
          - "SIGNATURE_VERIFY"
          - "DY_ENABLE"
        collectionFormat: "multi"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              type: "string"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}:
    get:
      tags:
      - "Keys"
      summary: "Get key details"
      description: "Get detailed key information."
      operationId: "getKey"
      produces:
      - "application/json"
      parameters:
      - name: "keyId"
        in: "path"
        description: "Key ID to look for"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
        default: true
      - name: "signed"
        in: "query"
        description: "Signed"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/KeyInfo"
      security:
      - basicAuth: []
      - Authorization: []
    put:
      tags:
      - "Keys"
      summary: "Update a key"
      description: "Update an existing key."
      operationId: "updateKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key id"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Key updates"
        required: false
        schema:
          $ref: "#/definitions/KeyUpdates"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/KeyInfo"
      security:
      - basicAuth: []
      - Authorization: []
    delete:
      tags:
      - "Keys"
      summary: "Delete a key"
      description: "Delete the specified key."
      operationId: "deleteKey"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key ID to delete"
        required: true
        type: "string"
      - name: "fullDelete"
        in: "query"
        description: "Delete object completely"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/activate:
    post:
      tags:
      - "Keys"
      summary: "Activate a key"
      description: "Activate the specified key."
      operationId: "activateKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key ID to activate"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/alerts:
    get:
      tags:
      - "Keys"
      summary: "Get alerts for a specific key"
      description: "Return the alerts for a specific key."
      operationId: "getKeyAlerts"
      produces:
      - "application/json"
      parameters:
      - name: "keyId"
        in: "path"
        description: "Key ID to look for"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Alert"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/decrypt:
    post:
      tags:
      - "Keys"
      summary: "Decrypt a value"
      description: "Decrypt a value using the key. The same parameters for encryption\
        \ are supported for decryption, as well as both simple and unseal mode. For\
        \ a symmetric key, only simple mode is supported. If decryption fails with\
        \ the latest key version, the previous version (if it exists) is used, etc."
      operationId: "decryptWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "The key used for decryption"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data to decrypt"
        required: false
        schema:
          $ref: "#/definitions/DecryptData"
      responses:
        200:
          description: "OK. Returns clear text encoded according to request parameters"
          schema:
            $ref: "#/definitions/ClearText"
        400:
          description: "Authentication encryption failure"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/decryptx:
    post:
      tags:
      - "Keys"
      summary: "Decrypt multiple values"
      description: "Decryption is done using the key. The same parameters for encryption\
        \ are supported for decryption, as well as both simple and unseal mode. For\
        \ a symmetric key, only simple mode is supported. If decryption fails with\
        \ the latest key version, the previous version (if it exists) is used, etc."
      operationId: "multiDecryptWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "The key used for decryption"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Object containing a list of ciphertexts that you want to decrypt."
        required: false
        schema:
          $ref: "#/definitions/Decryptx"
      responses:
        200:
          description: "Array of decrypted values with requested encoding"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ClearText"
        400:
          description: "Authentication encryption failure"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/derive:
    post:
      tags:
      - "Keys"
      summary: "Derive and store a new key"
      description: "Derive a new key and store it in UKC."
      operationId: "derive"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "The key used for derive"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Derivation data"
        required: false
        schema:
          $ref: "#/definitions/DeriveData"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/KeyInfo"
        201:
          description: "New key derived successfully"
          schema:
            $ref: "#/definitions/KeyInfo"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/derive-key:
    post:
      tags:
      - "Keys"
      summary: "Derive a new key"
      description: "Derive a new key and return it without storing it."
      operationId: "deriveKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "The key used for derive"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Derivation data"
        required: false
        schema:
          $ref: "#/definitions/DeriveKeyData"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Key"
        201:
          description: "New key derived successfully"
          schema:
            $ref: "#/definitions/Key"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/disable:
    post:
      tags:
      - "Keys"
      summary: "Disable a key"
      description: "Disable a specific key."
      operationId: "disableKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key ID to enable/disable"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/KeyInfo"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/enable:
    post:
      tags:
      - "Keys"
      summary: "Enable a key"
      description: "Enable a specific key."
      operationId: "enabledKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key ID to enable"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/KeyInfo"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/encrypt:
    post:
      tags:
      - "Keys"
      summary: "Encrypt clear text"
      description: "Encrypt clear text into cipher text with an existing key. Parameters\
        \ allow selecting padding mode and encryption mode. If key type is asymmetric,\
        \ encryption is done exactly as encryption with a certificate. If key type\
        \ is symmetric, only simple mode is supported."
      operationId: "encryptWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Id of the Key used for encryption"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data to encrypt"
        required: false
        schema:
          $ref: "#/definitions/EncryptData"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Cipher"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/encryptx:
    post:
      tags:
      - "Keys"
      summary: "Encrypt multiple values"
      description: "Encryption is done using the key. Parameters allow selecting padding\
        \ mode and encryption mode. If key type is asymmetric, encryption is done\
        \ exactly as encryption with a certificate. If key type is symmetric, only\
        \ simple mode is supported."
      operationId: "multiEncryptWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key used for encryption"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Object containing a list of plaintexts that you want to encrypt."
        required: false
        schema:
          $ref: "#/definitions/Encryptx"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Cipher"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/mac:
    post:
      tags:
      - "Keys"
      summary: "Create MAC for a message"
      description: "Generate a Message Authentication Code (MAC) for a message. MAC\
        \ mode is provided as a parameter.\n\n Note the following for the parameters\
        \ in the body:\n<ul><li>iv - Externally provided IV, default encoded in BASE64.\
        \ Must be no more than 15 bytes.</li><li>aad - Authentication data, default\
        \ encoding is PLAIN</li><li>tagLength - For CCM, the value must be between\
        \ 4 and 16, inclusive, and must be even. For other algorithms, the value must\
        \ be between 1 and 16, inclusive.</li></ul>"
      operationId: "createMacWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key used for MAC"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Mac Data"
        required: false
        schema:
          $ref: "#/definitions/MACSignData"
      responses:
        200:
          description: "OK. Returns the generated Message Authentication Code"
          schema:
            $ref: "#/definitions/Mac"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/macVerify:
    post:
      tags:
      - "Keys"
      summary: "Verify MAC"
      description: "Verifies a MAC value. Supports the same parameters as the MAC\
        \ option."
      operationId: "verifyMacWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key used for verification"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Mac Verify Data"
        required: false
        schema:
          $ref: "#/definitions/MACVerifyData"
      responses:
        200:
          description: "OK. Verified Successfully"
        400:
          description: "Verification failed"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/permissions:
    get:
      tags:
      - "Keys"
      summary: "Get key operations"
      description: "Return specific allowed operations on a key for a specific key\
        \ UID."
      operationId: "getKeyPermissions"
      produces:
      - "application/json"
      parameters:
      - name: "keyId"
        in: "path"
        description: "Key ID to look for"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              type: "string"
              enum:
              - "ACTIVATE"
              - "ADD_ATTRIBUTE"
              - "CREATE"
              - "CREATE_KEY_PAIR"
              - "DECRYPT"
              - "DELETE_ATTRIBUTE"
              - "DERIVE_KEY"
              - "DESTROY"
              - "DELETE"
              - "DY_DERIVE"
              - "DY_GET_KEY_MATERIAL"
              - "DY_GET_SECRET_DATA"
              - "DY_UPDATE_DATA"
              - "ENCRYPT"
              - "MAC"
              - "MAC_VERIFY"
              - "MODIFY_ATTRIBUTE"
              - "REGISTER"
              - "REKEY"
              - "REKEY_KEY_PAIR"
              - "REVOKE"
              - "SIGN"
              - "SIGNATURE_VERIFY"
              - "DY_ENABLE"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/public:
    get:
      tags:
      - "Keys"
      summary: "Get public key data"
      description: "Return the public details of an asymmetric key or exportable symmetric\
        \ key."
      operationId: "getPublicKeyData"
      produces:
      - "application/json"
      - "application/x-pem-file"
      parameters:
      - name: "keyId"
        in: "path"
        description: "Key ID to look for"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "obfuscate"
        in: "query"
        description: "Add obfuscated private key as part of the encoded data, relevant\
          \ only for PKI keys."
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Key"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/rekey:
    post:
      tags:
      - "Keys"
      summary: "Renew a key"
      description: "Create a new key with the same parameters as the existing one.\
        \ The new key inherits the current key ID and a link is created between the\
        \ two keys."
      operationId: "rekey"
      consumes:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyRotationInterval"
        in: "query"
        description: "key rotation interval"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "keyStateOffset"
        in: "query"
        description: "key state offset"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "keyId"
        in: "path"
        description: "The key to move. This could be either a key UID or label."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/KeyInfo"
        201:
          description: "OK. Key renewed successfully."
          schema:
            $ref: "#/definitions/KeyInfo"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/revoke:
    post:
      tags:
      - "Keys"
      summary: "Revoke a key"
      description: "Revoke the specified key."
      operationId: "revokeKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key ID to activate"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Revocation parameters"
        required: false
        schema:
          $ref: "#/definitions/RevokeParams"
      responses:
        200:
          description: "OK"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/seal:
    post:
      tags:
      - "Keys"
      summary: "Seal clear text"
      description: "Seal clear text into cipher text with an existing key. Encryption\
        \ is done exactly as encryption with a certificate."
      operationId: "sealWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Id of the Key used for encryption"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data to seal"
        required: false
        schema:
          $ref: "#/definitions/SealData"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SealedCipher"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/sign:
    post:
      tags:
      - "Keys"
      summary: "Sign a message"
      description: "Hash and sign a given message. If requested, it can also assume\
        \ the input is a hash value and just sign it. Different modes are supported\
        \ as parameters and the output can be either a raw signature or PKCS7, based\
        \ on request."
      operationId: "signWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key used for signing"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data that needs to be signed."
        required: false
        schema:
          $ref: "#/definitions/SignData"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Signature"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/unseal:
    post:
      tags:
      - "Keys"
      summary: "Unseal a value"
      description: "Unseal a value using the key. The same parameters for encryption\
        \ are supported for decryption, as well as both simple and unseal mode. For\
        \ a symmetric key, only simple mode is supported. If decryption fails with\
        \ the latest key version, the previous version (if it exists) is used, etc."
      operationId: "unSealWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "The key used for decryption"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data to un-seal"
        required: false
        schema:
          $ref: "#/definitions/UnSealData"
      responses:
        200:
          description: "OK. Returns clear text encoded according to request parameters"
          schema:
            $ref: "#/definitions/ClearText"
        400:
          description: "Authentication encryption failure"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/unwrap:
    post:
      tags:
      - "Keys"
      summary: "Unwrap and import key"
      description: "Unwrap and import a new key."
      operationId: "unwrap"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "The key used for unwrapping"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "UnWrap Data"
        required: false
        schema:
          $ref: "#/definitions/UnwrapData"
      responses:
        201:
          description: "New key created added successfully"
        400:
          description: "Authentication encryption failure"
        409:
          description: "Key with this ID already exist"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/value:
    get:
      tags:
      - "Keys"
      summary: "Get key material"
      description: "Return the key material for an asymmetric key or exportable symmetric\
        \ key.\n\nYou can request the asymmetric key in PFX or PEM format and symmetric\
        \ keys in raw format."
      operationId: "getKeyData"
      produces:
      - "application/json"
      - "application/x-pkcs12"
      - "application/x-pem-file"
      parameters:
      - name: "keyId"
        in: "path"
        description: "Key ID to look for"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "password"
        in: "query"
        description: "Password"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Key"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/verify:
    post:
      tags:
      - "Keys"
      summary: "Verify a signature"
      description: "Verifies a signature value. Supports the same parameters as the\
        \ sign option."
      operationId: "verifyWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Certificate used for verification"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data with a signature that needs to be verified."
        required: false
        schema:
          $ref: "#/definitions/VerifyData"
      responses:
        200:
          description: "OK. Signature verified successfully"
        400:
          description: "Verification failed"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/keys/{keyId}/wrap:
    post:
      tags:
      - "Keys"
      summary: "Wrap and export key"
      description: "Wrap and export a key with an existing key."
      operationId: "wrap"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key used for wrapping"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Wrap data"
        required: false
        schema:
          $ref: "#/definitions/WrapData"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Cipher"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/pair/health:
    get:
      tags:
      - "General"
      summary: "Check pair health"
      description: "Return health status of the UKC pair and determine if it is usable"
      operationId: "getPairHealth"
      parameters:
      - name: "timeout"
        in: "query"
        description: "Timeout"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "OK"
  /api/v1/random:
    get:
      tags:
      - "General"
      summary: "Generate random bytes"
      description: "Get random bytes from the UKC server. By default it returns 32\
        \ bytes, unless size is specified. The UKC random number generator is combined\
        \ from different entropy sources of the different servers in the UKC cluster"
      operationId: "generateRandom"
      produces:
      - "application/json"
      parameters:
      - name: "size"
        in: "query"
        description: "Size (in bytes) of random bytes to return"
        required: false
        type: "integer"
        default: 32
        maximum: 1024
        minimum: 32
        format: "int32"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/RandomEntropyBytes"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/random/entropy-bytes:
    put:
      tags:
      - "General"
      summary: "Add entropy bytes"
      description: "Add random bytes to the UKC entropy source. Different clients\
        \ can add entropy to the server. Collecting entropy from the clients can enhance\
        \ the strength of the UKC random number generator. This function only adds\
        \ entropy, i.e. if the provided value has no entropy, it does not harm the\
        \ generator quality."
      operationId: "addRandomEntropyBytes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Random bytes"
        required: false
        schema:
          $ref: "#/definitions/RandomEntropyBytes"
      responses:
        200:
          description: "OK"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/secrets:
    get:
      tags:
      - "Secrets"
      summary: "List secrets"
      description: "Return a list of all secrets in a partition"
      operationId: "listSecrets"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "Key id"
        required: false
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Limit"
        required: false
        type: "integer"
        format: "int32"
      - name: "skip"
        in: "query"
        description: "skip"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "groups"
        in: "query"
        description: "Groups"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SecretListResponse"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/secrets/file:
    post:
      tags:
      - "Secrets"
      summary: "Import secret from file"
      description: "Import a secret from a file"
      operationId: "addFileSecret"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "newSecret"
        in: "formData"
        description: "Secret data"
        required: true
        type: "file"
      - name: "id"
        in: "formData"
        description: "Secret ID"
        required: true
        type: "string"
      - name: "description"
        in: "formData"
        description: "Key description"
        required: false
        type: "string"
      - name: "groups"
        in: "formData"
        description: "List of groups"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Secret"
        201:
          description: "OK"
          schema:
            $ref: "#/definitions/Secret"
        409:
          description: "Secret with this ID already exist"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/secrets/generate:
    post:
      tags:
      - "Secrets"
      summary: "Generate a new secret"
      description: "Add new secret data with label"
      operationId: "generateSecret"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - in: "body"
        name: "body"
        description: "newSecret"
        required: false
        schema:
          $ref: "#/definitions/NewGeneratedSecret"
      - name: "complexity"
        in: "query"
        description: "complexity"
        required: false
        type: "boolean"
        default: true
      - name: "length"
        in: "query"
        description: "length"
        required: false
        type: "integer"
        default: 8
        maximum: 32767
        minimum: 1
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Secret"
        201:
          description: "OK"
          schema:
            $ref: "#/definitions/Secret"
        409:
          description: "Secret with this ID already exists"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/secrets/groups:
    get:
      tags:
      - "Secrets"
      summary: "Get secret groups"
      description: "Get groups for secrets"
      operationId: "getSecretsGroups"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "operations"
        in: "query"
        description: "Operations"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "ACTIVATE"
          - "ADD_ATTRIBUTE"
          - "CREATE"
          - "CREATE_KEY_PAIR"
          - "DECRYPT"
          - "DELETE_ATTRIBUTE"
          - "DERIVE_KEY"
          - "DESTROY"
          - "DELETE"
          - "DY_DERIVE"
          - "DY_GET_KEY_MATERIAL"
          - "DY_GET_SECRET_DATA"
          - "DY_UPDATE_DATA"
          - "ENCRYPT"
          - "MAC"
          - "MAC_VERIFY"
          - "MODIFY_ATTRIBUTE"
          - "REGISTER"
          - "REKEY"
          - "REKEY_KEY_PAIR"
          - "REVOKE"
          - "SIGN"
          - "SIGNATURE_VERIFY"
          - "DY_ENABLE"
        collectionFormat: "multi"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              type: "string"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/secrets/text:
    post:
      tags:
      - "Secrets"
      summary: "Import secret from text"
      description: "Add new secret data with label"
      operationId: "addTextSecret"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - in: "body"
        name: "body"
        description: "newSecret"
        required: false
        schema:
          $ref: "#/definitions/NewSecret"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Secret"
        201:
          description: "OK"
          schema:
            $ref: "#/definitions/Secret"
        409:
          description: "Secret with this ID already exist"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/secrets/{secretId}:
    get:
      tags:
      - "Secrets"
      summary: "Get secret metadata"
      description: "Return the metadata for an existing secret"
      operationId: "getSecret"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "secretId"
        in: "path"
        description: "Secret ID to look for"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Secret"
      security:
      - basicAuth: []
      - Authorization: []
    put:
      tags:
      - "Secrets"
      summary: "Update secret details"
      description: "Update existing secret details"
      operationId: "updateSecret"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "secretId"
        in: "path"
        description: "Secret ID"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Secret updates"
        required: false
        schema:
          $ref: "#/definitions/SecretUpdates"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Secret"
      security:
      - basicAuth: []
      - Authorization: []
    delete:
      tags:
      - "Secrets"
      summary: "Delete a secret"
      description: "Deletes a secret by its label/ID"
      operationId: "deleteSecret"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "secretId"
        in: "path"
        description: "Secret ID to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/secrets/{secretId}/file:
    get:
      tags:
      - "Secrets"
      summary: "Get secret value from file"
      description: "Gets the value of a secret from a file."
      operationId: "getSecretFileData"
      consumes:
      - "application/json"
      produces:
      - "application/json,application/octet-stream"
      - "application/json"
      - "application/octet-stream"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "secretId"
        in: "path"
        description: "Secret ID to look for"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "file"
      security:
      - basicAuth: []
      - Authorization: []
    put:
      tags:
      - "Secrets"
      summary: "Update secret data from file"
      description: "Update existing secret"
      operationId: "updateFileSecret"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "secretId"
        in: "path"
        description: "Secret ID"
        required: true
        type: "string"
      - name: "newSecret"
        in: "formData"
        description: "secret data"
        required: true
        type: "file"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Secret"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/secrets/{secretId}/text:
    get:
      tags:
      - "Secrets"
      summary: "Get secret value from text"
      description: "Gets the value of a secret from a text string"
      operationId: "getSecretTextData"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "secretId"
        in: "path"
        description: "Secret ID to look for"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
      security:
      - basicAuth: []
      - Authorization: []
    put:
      tags:
      - "Secrets"
      summary: "Update secret data from text"
      description: "Update existing secret"
      operationId: "updateTextSecret"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "secretId"
        in: "path"
        description: "Secret ID"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "updatedSecret"
        required: false
        schema:
          $ref: "#/definitions/UpdatedSecret"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Secret"
      security:
      - basicAuth: []
      - Authorization: []
  /api/v1/self.cer:
    get:
      tags:
      - "General"
      summary: "Get server certificate"
      description: "Download this specific server certificate. It is used for registering\
        \ new servers."
      operationId: "selfCertGet"
      produces:
      - "application/x-x509-user-cert,application/json"
      - "application/x-x509-user-cert"
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "file"
  /api/v1/server-ca.p7b:
    get:
      tags:
      - "General"
      summary: "Get root certificate"
      description: "Download the root CA certificate of UKC."
      operationId: "getCaCert"
      produces:
      - "application/x-pkcs7-certificates,application/json"
      - "application/x-pkcs7-certificates"
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "file"
  /api/v1/trust:
    get:
      tags:
      - "General"
      summary: "Get trusted certificates"
      description: "Get all trusted certificates."
      operationId: "getTrust"
      produces:
      - "application/json"
      parameters:
      - name: "detailed"
        in: "query"
        description: "Detailed"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SystemCertificate"
securityDefinitions:
  Authorization:
    description: "For accessing the API a valid JWT token must be passed in all the\
      \ queries in\nthe 'Authorization' header.\nA valid JWT token is generated by\
      \ the API and returned as answer of a call\nto the route /login giving a valid\
      \ user and password.\nThe following syntax must be \nused in the 'Authorization'\
      \ header :\n       Bearer: xxxxxx.yyyyyyy.zzzzzz"
    type: "apiKey"
    name: "Authorization"
    in: "header"
  basicAuth:
    type: "basic"
definitions:
  Aad:
    type: "object"
    required:
    - "value"
    properties:
      value:
        type: "string"
        description: "Authentication data"
      encoding:
        type: "string"
        description: "Authentication data encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
  Alert:
    type: "object"
    properties:
      alertType:
        type: "string"
        readOnly: true
        enum:
        - "CERT_ABOUT_TO_EXPIRE"
        - "CERT_EXPIRED"
        - "OUT_OF_SYNC"
        - "IS_LOCKED"
        - "RENEW_REQUIRED"
        - "DB_BACKUP_INCONSISTENT"
        - "DB_BACKUP_FAILURE"
        - "SECRET_ABOUT_TO_EXPIRE"
        - "SECRET_EXPIRED"
        - "KEY_ROTATION_IS_APPROACHING"
        - "KEY_ACTIVATION_IS_APPROACHING"
        - "KEY_DEACTIVATION_IS_APPROACHING"
        - "RESTART_REQUIRED"
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
      title:
        type: "string"
        readOnly: true
  AlertsSummary:
    type: "object"
    properties:
      category:
        type: "string"
        readOnly: true
        enum:
        - "CLIENTS"
        - "SYSTEM"
        - "KEYS"
        - "BACKUP"
      alertType:
        type: "string"
        readOnly: true
        enum:
        - "CERT_ABOUT_TO_EXPIRE"
        - "CERT_EXPIRED"
        - "OUT_OF_SYNC"
        - "IS_LOCKED"
        - "RENEW_REQUIRED"
        - "DB_BACKUP_INCONSISTENT"
        - "DB_BACKUP_FAILURE"
        - "SECRET_ABOUT_TO_EXPIRE"
        - "SECRET_EXPIRED"
        - "KEY_ROTATION_IS_APPROACHING"
        - "KEY_ACTIVATION_IS_APPROACHING"
        - "KEY_DEACTIVATION_IS_APPROACHING"
        - "RESTART_REQUIRED"
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
      counter:
        type: "integer"
        format: "int32"
        readOnly: true
      title:
        type: "string"
        readOnly: true
  AlternativeNames:
    type: "object"
    required:
    - "isCritical"
    - "uid"
    properties:
      names:
        type: "array"
        items:
          type: "string"
      uid:
        type: "string"
        description: "Extension UID"
      isCritical:
        type: "boolean"
        description: "Is Extension Critical"
    description: "Certificate x509 extension"
  ApplicationInfo:
    type: "object"
    properties:
      nameSpace:
        type: "string"
      data:
        type: "object"
        additionalProperties:
          type: "object"
  AsymmetricCryptoParams:
    type: "object"
    properties:
      padding:
        description: "Padding information"
        $ref: "#/definitions/Padding"
      hash:
        type: "string"
        description: "the hash type"
        enum:
        - "SHA1"
        - "SHA256"
        - "SHA384"
        - "SHA512"
  AuthorityKeyIdentifier:
    type: "object"
    required:
    - "isCritical"
    - "uid"
    properties:
      uid:
        type: "string"
        description: "Extension UID"
      isCritical:
        type: "boolean"
        description: "Is Extension Critical"
      keyId:
        type: "string"
        readOnly: true
      authNames:
        type: "array"
        items:
          type: "string"
      serialNumber:
        type: "string"
    description: "Certificate x509 extension"
  BasicConstraints:
    type: "object"
    required:
    - "isCritical"
    - "uid"
    properties:
      uid:
        type: "string"
        description: "Extension UID"
      isCritical:
        type: "boolean"
        description: "Is Extension Critical"
      pathLen:
        type: "integer"
        format: "int32"
      isCa:
        type: "boolean"
    description: "Certificate x509 extension"
  BipDerivationParams:
    type: "object"
    required:
    - "childNumber"
    - "hardened"
    properties:
      childNumber:
        type: "integer"
        format: "int32"
        description: "child number"
      hardened:
        type: "boolean"
        description: "True if hardened"
  CertificateInfo:
    type: "object"
    required:
    - "id"
    - "isCa"
    - "isSelfSigned"
    - "issuer"
    - "pkInfo"
    - "serial"
    - "sha1Thumbprint"
    - "signature"
    - "signatureAlgorithm"
    - "subject"
    - "uid"
    - "validFrom"
    - "validUntil"
    - "version"
    properties:
      id:
        type: "string"
        example: "my-certificate"
        description: "Certificate identifier label"
      uid:
        type: "string"
      sha1Thumbprint:
        type: "string"
        description: "certificate sha1"
      subject:
        type: "string"
      issuer:
        type: "string"
        description: "The CA that signed this certificate"
      validFrom:
        type: "string"
        description: "Date of of validity period start for this certificate"
      validUntil:
        type: "string"
        description: "Date of of validity period end for this certificate"
      version:
        type: "string"
        example: "V3"
        description: "Certificate version"
      serial:
        type: "string"
        example: "185fb61e97f55b19"
        description: "Certificate serial number"
      signatureAlgorithm:
        type: "string"
        example: "sha256RSA"
        description: "Signing algorithm used for signing this certificate"
      isCa:
        type: "boolean"
        description: "Determines if this certificate is a CA certificate"
      isSelfSigned:
        type: "boolean"
        description: "Determines if this certificate is a self signed certificate"
      pkInfo:
        $ref: "#/definitions/PKInfoType"
      basicConstraints:
        description: "Basic Constraints Extension"
        $ref: "#/definitions/BasicConstraints"
      subjectKeyIdentifier:
        description: "Subject Key Identifier Extension"
        $ref: "#/definitions/SubjectKeyIdentifier"
      authorityKeyIdentifier:
        description: "Authority Key Identifier Extension"
        $ref: "#/definitions/AuthorityKeyIdentifier"
      subjectAlternativeNames:
        description: "Subject Alternative Names Extension"
        $ref: "#/definitions/AlternativeNames"
      issuerAlternativeNames:
        description: "Issuer Alternative Names Extension"
        $ref: "#/definitions/AlternativeNames"
      extendedKeyUsage:
        description: "Extended Key Usage Extension"
        $ref: "#/definitions/ExtendedKeyUsage"
      signature:
        type: "string"
        description: "CA signature value for this certificate"
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
    description: "Certificate public information"
  Cipher:
    type: "object"
    required:
    - "cipherTextBase64"
    properties:
      cipherTextBase64:
        type: "string"
        description: "base64 encoded encrypted data"
        minLength: 1
      ivBase64:
        type: "string"
        description: "base64 encoded Initialize Vector"
    description: "Includes encrypted data"
  ClearText:
    type: "object"
    properties:
      clearText:
        type: "string"
  ConcatDerivationParams:
    type: "object"
    required:
    - "data"
    properties:
      data:
        type: "string"
        description: "Derivation data"
      isPrefix:
        type: "boolean"
        description: "True for prefix, false for suffix"
  DeactivationInfo:
    type: "object"
    properties:
      revocationReason:
        type: "string"
      message:
        type: "string"
    description: "Deactivated key info"
  DecryptData:
    type: "object"
    required:
    - "cipher"
    properties:
      aSymmetricParams:
        description: "Asymmetric cryptographic parameters for symmetric keys"
        $ref: "#/definitions/AsymmetricCryptoParams"
      symmetricParams:
        description: "Symmetric cryptographic parameters for symmetric keys"
        $ref: "#/definitions/SymmetricCryptoParams"
      cipher:
        description: "the cipher to decrypt"
        $ref: "#/definitions/Cipher"
      outputEncoding:
        type: "string"
        description: "the decrypted result encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
    description: "Input for a decrypt operation"
  Decryptx:
    type: "object"
    required:
    - "encrypted"
    properties:
      encrypted:
        type: "array"
        items:
          $ref: "#/definitions/Cipher"
      params:
        $ref: "#/definitions/SymmetricCryptoParams"
      outputEncoding:
        type: "string"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
    description: "Input for multi decrypt operation"
  DeriveData:
    type: "object"
    required:
    - "derivationMode"
    - "newGeneratedKey"
    properties:
      newGeneratedKey:
        $ref: "#/definitions/NewGeneratedKey"
      derivationMode:
        type: "string"
        description: "Derivation Mode"
        enum:
        - "CONCAT"
        - "HASH"
        - "BIP"
        - "EDDSA"
      hash:
        type: "string"
        description: "Hash algorithm"
        enum:
        - "SHA1"
        - "SHA256"
        - "SHA384"
        - "SHA512"
      bipDerivationParams:
        description: "Bip derivation parameters"
        $ref: "#/definitions/BipDerivationParams"
      concatDerivationParams:
        description: "Concat derivation parameters"
        $ref: "#/definitions/ConcatDerivationParams"
    description: "Input for a derive operation"
  DeriveKeyData:
    type: "object"
    required:
    - "data"
    properties:
      data:
        type: "string"
        description: "data"
      dataEncoding:
        type: "string"
        description: "data encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
      size:
        type: "integer"
        format: "int32"
        description: "key size"
  ECCBipKeyInfo:
    type: "object"
    properties:
      level:
        type: "string"
        format: "byte"
        description: "Level (0 for master)"
        readOnly: true
      childNumber:
        type: "integer"
        format: "int32"
        description: "child number"
        readOnly: true
      hardened:
        type: "boolean"
        description: "True if hardened"
        readOnly: true
      chainCode:
        type: "string"
        description: "BASE64 chain code"
        readOnly: true
      parentUid:
        type: "string"
        description: "the parent uid"
        readOnly: true
      parentFingerprint:
        type: "integer"
        format: "int32"
        description: "parent fingerprint (The first 32 bits of the identifier)"
        readOnly: true
  ECCKeyInfoType:
    type: "object"
    required:
    - "curve"
    - "ecPoint"
    - "eccBipKeyInfo"
    properties:
      curve:
        type: "string"
        enum:
        - "P256"
        - "P384"
        - "P521"
        - "SECP_256K_1"
      ecPoint:
        type: "string"
        description: "Encoded public key (EC point)"
      eccBipKeyInfo:
        description: "ECC BIP info"
        $ref: "#/definitions/ECCBipKeyInfo"
    description: "Details of ECC public key"
  EncryptData:
    type: "object"
    required:
    - "clearText"
    properties:
      aSymmetricParams:
        description: "Asymmetric cryptographic parameters for symmetric keys"
        $ref: "#/definitions/AsymmetricCryptoParams"
      symmetricParams:
        description: "Symmetric cryptographic parameters for symmetric keys"
        $ref: "#/definitions/SymmetricCryptoParams"
      clearText:
        type: "string"
        description: "data to encrypt"
        minLength: 1
      dataEncoding:
        type: "string"
        description: "the input data encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
    description: "Input for encryption"
  Encryptx:
    type: "object"
    required:
    - "clearTextItems"
    properties:
      clearTextItems:
        type: "array"
        description: "Array of clearText items to encrypt"
        items:
          type: "string"
      dataEncoding:
        type: "string"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
      params:
        $ref: "#/definitions/SymmetricCryptoParams"
    description: "Input for encryption of multiple values"
  ExtendedKeyUsage:
    type: "object"
    required:
    - "isCritical"
    - "uid"
    properties:
      keyUsages:
        type: "array"
        items:
          type: "string"
      uid:
        type: "string"
        description: "Extension UID"
      isCritical:
        type: "boolean"
        description: "Is Extension Critical"
    description: "Certificate x509 extension"
  Iv:
    type: "object"
    required:
    - "value"
    properties:
      value:
        type: "string"
        description: "Externally provided IV"
      encoding:
        type: "string"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
  Key:
    type: "object"
    properties:
      keyData:
        type: "string"
        description: "base64 encoded key data"
  KeyFormat:
    type: "object"
    required:
    - "type"
    properties:
      type:
        type: "string"
        description: "key type"
        enum:
        - "RSA"
        - "ECC"
        - "AES"
        - "TDES"
        - "HMAC"
        - "SIV"
        - "XTS"
        - "PRF"
        - "PWD"
        - "LIMA"
        - "EDDSA"
      size:
        type: "integer"
        format: "int32"
        example: "for RSA : {2048,3072,4096}"
        description: "key size"
      curve:
        type: "string"
        description: "Required for ecliptic curve"
        enum:
        - "P256"
        - "P384"
        - "P521"
        - "SECP_256K_1"
      offlineEcdsaParams:
        description: "Required for offline ECDSA keys"
        $ref: "#/definitions/OfflineEcdsaParams"
      offlineECParams:
        description: "Required for offline ECC keys"
        $ref: "#/definitions/OfflineECParams"
  KeyInfo:
    type: "object"
    properties:
      id:
        type: "string"
        example: "my-key"
        description: "key identifier label"
        readOnly: true
      uid:
        type: "string"
        example: "0x00d78d6a396072e9a0"
        description: "key identifier"
        readOnly: true
      objectType:
        type: "string"
        description: "object type"
        readOnly: true
        enum:
        - "CERTIFICATE"
        - "PRIVATE_KEY"
        - "SYMMETRIC"
        - "PUBLIC_KEY"
        - "SECRET_DATA"
      keyFormat:
        readOnly: true
        $ref: "#/definitions/KeyFormat"
      keyProperties:
        readOnly: true
        $ref: "#/definitions/KeyProperties"
      local:
        type: "boolean"
        description: "True if this key was created inside UKC, false when imported"
        readOnly: true
      hasCertificate:
        type: "boolean"
        description: "True if this key has a matching certificate in UKC"
        readOnly: true
      certificateOnly:
        type: "boolean"
        description: "True if this certificate does not have a matching certificate\
          \ in UKC"
        readOnly: true
      state:
        type: "string"
        readOnly: true
        enum:
        - "PREACTIVE"
        - "ACTIVE"
        - "DEACTIVATED"
        - "COMPROMISED"
        - "DESTROYED"
        - "DESTROYED_COMPROMISED"
      isEnabled:
        type: "boolean"
        readOnly: true
      sync:
        type: "boolean"
        description: "This key is synchronized in within the UKC pair"
        readOnly: true
      isFips:
        type: "boolean"
        description: "This key created in FIPS mode"
        readOnly: true
      requireApproval:
        type: "boolean"
        description: "This key is requires partner approval for sign operations"
        readOnly: true
      prev:
        type: "string"
        description: "Does the key have previous key (created by Rekey operation)"
        readOnly: true
      next:
        type: "string"
        description: "Does the key have next key (created by Rekey operation)"
        readOnly: true
      nextKeyRotationTime:
        type: "string"
        description: "Next key rotation time"
        readOnly: true
      applicationInfos:
        type: "array"
        description: "Application infos"
        readOnly: true
        uniqueItems: true
        items:
          $ref: "#/definitions/ApplicationInfo"
      pkInfo:
        description: "Private key (RSA/ECC) information"
        readOnly: true
        $ref: "#/definitions/PKInfoType"
      chain:
        type: "array"
        description: "Private key (RSA/ECC) information"
        readOnly: true
        items:
          $ref: "#/definitions/CertificateInfo"
      chains:
        type: "array"
        description: "Key chains"
        readOnly: true
        items:
          type: "array"
          items:
            $ref: "#/definitions/CertificateInfo"
      createdAt:
        type: "string"
        description: "Creation date"
        readOnly: true
      updatedAt:
        type: "string"
        description: "Last update date"
        readOnly: true
      activationDate:
        type: "string"
        description: "Activation date"
        readOnly: true
      deactivationDate:
        type: "string"
        description: "Deactivation date"
        readOnly: true
      compromiseDate:
        type: "string"
        description: "Compromise date"
        readOnly: true
      compromiseOccurrenceDate:
        type: "string"
        description: "Compromise occurrence date"
        readOnly: true
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
      deactivationInfo:
        description: "Deactivated key information"
        readOnly: true
        $ref: "#/definitions/DeactivationInfo"
      getdestroyDate:
        type: "string"
        description: "Destroy date"
        readOnly: true
    description: "Key object details"
  KeyInfoListResponse:
    type: "object"
    properties:
      totalItems:
        type: "integer"
        format: "int32"
        readOnly: true
      limit:
        type: "integer"
        format: "int32"
        readOnly: true
      skip:
        type: "integer"
        format: "int32"
        readOnly: true
      items:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/KeyInfo"
  KeyProperties:
    type: "object"
    properties:
      description:
        type: "string"
        description: "Description for the key"
      supportedOperations:
        type: "array"
        description: "Key supported operations"
        items:
          type: "string"
          enum:
          - "SIGN"
          - "VERIFY"
          - "ENCRYPT"
          - "DECRYPT"
          - "WRAP"
          - "UNWRAP"
          - "DERIVE"
          - "MAC"
          - "MAC_VERIFY"
      trusted:
        type: "boolean"
        example: false
        description: "True if the key is trusted"
      keyRotationInterval:
        type: "integer"
        format: "int32"
        description: "Key rotation interval"
        minimum: 0
      exportType:
        type: "string"
        description: "The default value is <i>IN_PLAIN</i> for certificates and public\
          \ keys. Otherwise, the default is <i>NOT_EXPORTABLE</i>."
        enum:
        - "IN_PLAIN"
        - "WRAPPED"
        - "WRAPPED_WITH_TRUSTED"
        - "NON_EXPORTABLE"
      groups:
        type: "array"
        description: "Key groups"
        uniqueItems: true
        items:
          type: "string"
  KeyUpdates:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Key ID"
      description:
        type: "string"
        description: "Key description"
      groups:
        type: "array"
        description: "Key groups"
        uniqueItems: true
        items:
          type: "string"
      activationDate:
        type: "integer"
        format: "int64"
        description: "Activation date"
        readOnly: true
      deactivationDate:
        type: "integer"
        format: "int64"
        description: "Deactivation date"
        readOnly: true
  Label:
    type: "object"
    required:
    - "value"
    properties:
      value:
        type: "string"
      encoding:
        type: "string"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
  MACSignData:
    type: "object"
    required:
    - "data"
    properties:
      data:
        type: "string"
        description: "data"
        minLength: 1
      dataEncoding:
        type: "string"
        description: "data encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
      params:
        $ref: "#/definitions/MacCryptoParams"
    description: "Input for MAC operation"
  MACVerifyData:
    type: "object"
    required:
    - "data"
    - "mac"
    properties:
      data:
        type: "string"
        description: "data"
        minLength: 1
      dataEncoding:
        type: "string"
        description: "data encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
      params:
        $ref: "#/definitions/MacCryptoParams"
      mac:
        description: "MAC value to be verified, encoded as BASE64"
        $ref: "#/definitions/Mac"
    description: "Includes data used for MAC verification"
  Mac:
    type: "object"
    properties:
      mac:
        type: "string"
        example: "c2Rmc2FkZmFzZGZhIHNkZmFzZGZzMjM0MjM0MzQyIGRmIGFzZGZhIDMz"
      ivBase64:
        type: "string"
        description: "base64 encoded Initialize Vector"
  MacCryptoParams:
    type: "object"
    properties:
      mode:
        type: "string"
        description: "Mode of operation"
        enum:
        - "GMAC"
        - "CMAC"
        - "HMAC_SHA1"
        - "HMAC_SHA256"
        - "HMAC_SHA384"
        - "HMAC_SHA512"
      iv:
        description: "Externally provided IV, default encoded in BASE64"
        $ref: "#/definitions/Iv"
      tagLength:
        type: "integer"
        format: "int32"
  NewGeneratedKey:
    type: "object"
    required:
    - "keyFormat"
    - "keyId"
    properties:
      keyId:
        type: "string"
        description: "An ID for the new key"
        minLength: 1
      keyIdEncoding:
        type: "string"
        description: "Encoding for the new key ID"
        readOnly: true
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
      keyProperties:
        $ref: "#/definitions/KeyProperties"
      activate:
        type: "boolean"
        description: "Activate the key"
      activationDate:
        type: "integer"
        format: "int64"
        description: "Activation date"
      deactivationDate:
        type: "integer"
        format: "int64"
        description: "Deactivation date"
      keyFormat:
        $ref: "#/definitions/KeyFormat"
  NewGeneratedSecret:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
        example: "mySecret1"
        description: "An identifier/label for the secret data"
        minLength: 1
      description:
        type: "string"
        description: "The secret description"
      groups:
        type: "array"
        description: "Secret groups"
        uniqueItems: true
        items:
          type: "string"
  NewSecret:
    type: "object"
    required:
    - "data"
    - "id"
    properties:
      id:
        type: "string"
        example: "mySecret1"
        description: "An identifier/label for the secret data"
        minLength: 1
      description:
        type: "string"
        description: "The secret description"
      groups:
        type: "array"
        description: "Secret groups"
        uniqueItems: true
        items:
          type: "string"
      data:
        type: "string"
        example: "My secret data"
        description: "The data to keep as secret"
        minLength: 1
  OAEPPadding:
    type: "object"
    properties:
      mgf:
        type: "string"
        enum:
        - "SHA1"
        - "SHA256"
        - "SHA384"
        - "SHA512"
      label:
        description: "OAEP label, default encoding as PLAIN"
        $ref: "#/definitions/Label"
    description: "(Only relevant for encryption) The OAEP padding parameters"
  OfflineECParams:
    type: "object"
    required:
    - "keepKeyMaterial"
    - "paillierKey"
    - "paillierKeys"
    properties:
      backup:
        type: "string"
        description: "BASE64 ECDSA offline backup"
        readOnly: true
      paillierKey:
        type: "string"
        description: "EC offline Paillier key public key"
      paillierKeys:
        type: "array"
        description: "EC offline Paillier keys public key"
        items:
          type: "string"
      keepKeyMaterial:
        type: "boolean"
        description: "True when saving the key material"
  OfflineEcdsaParams:
    type: "object"
    required:
    - "keepKeyMaterial"
    - "paillierKey"
    - "paillierKeys"
    properties:
      backup:
        type: "string"
        description: "BASE64 ECDSA offline backup"
        readOnly: true
      paillierKey:
        type: "string"
        description: "ECDSA offline Paillier key public key"
      paillierKeys:
        type: "array"
        description: "EC offline Paillier keys public key"
        items:
          type: "string"
      keepKeyMaterial:
        type: "boolean"
        description: "True when saving the key material"
  PKInfoType:
    type: "object"
    properties:
      rsa:
        $ref: "#/definitions/RSAKeyInfoType"
      ecc:
        $ref: "#/definitions/ECCKeyInfoType"
    description: "Properties of PKI key"
  PSSPadding:
    type: "object"
    properties:
      mgf:
        type: "string"
        description: "MGF hash algorithm"
        enum:
        - "SHA1"
        - "SHA256"
        - "SHA384"
        - "SHA512"
      saltSize:
        type: "integer"
        format: "int32"
        description: "the salt size"
    description: "(Only relevant for signing) The PSS padding parameters"
  Padding:
    type: "object"
    required:
    - "type"
    properties:
      type:
        type: "string"
        enum:
        - "RAW"
        - "PKCS1"
        - "OAEP"
        - "PSS"
      pss:
        $ref: "#/definitions/PSSPadding"
      oaep:
        $ref: "#/definitions/OAEPPadding"
    description: "Crypto operation padding type"
  RSAKeyInfoType:
    type: "object"
    required:
    - "modulus"
    - "publicExponent"
    properties:
      publicExponent:
        type: "string"
        description: "HEX encoded exponent"
      modulus:
        type: "string"
        description: "HEX encoded modulus"
    description: "Details of RSA public key"
  RandomEntropyBytes:
    type: "object"
    required:
    - "entropy"
    properties:
      entropy:
        type: "string"
        description: "base64 encoded entropy bytes"
        minLength: 1
    description: "Random Entropy Bytes"
  RevokeParams:
    type: "object"
    properties:
      compromiseOccurrenceDate:
        type: "integer"
        format: "int64"
        description: "Date when the compromise occurred"
      message:
        type: "string"
        description: "revocation message"
        readOnly: true
      reason:
        type: "string"
        description: "Revocation reason"
        readOnly: true
        enum:
        - "UNSPECIFIED"
        - "KEY_COMPROMISE"
        - "CA_COMPROMISE"
        - "AFFILIATION_CHANGED"
        - "SUPERSEDED"
        - "CESSATION_OF_OPERATION"
        - "PRIVILEGE_WITHDRAWN"
  SealData:
    type: "object"
    required:
    - "clearText"
    properties:
      clearText:
        type: "string"
        description: "Data to seal"
        minLength: 1
      dataEncoding:
        type: "string"
        description: "the data encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
  SealedCipher:
    type: "object"
    required:
    - "value"
    properties:
      value:
        type: "string"
        description: "base64 encoded sealed value"
        minLength: 1
  Secret:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
        example: "mySecret1"
        description: "An identifier/label for the secret data"
      description:
        type: "string"
        description: "The secret description"
        readOnly: true
      uid:
        type: "string"
        example: "0x00d78d6a396072e9a0"
        description: "Secret identifier"
        readOnly: true
      groups:
        type: "array"
        description: "Secret groups"
        uniqueItems: true
        items:
          type: "string"
      createdAt:
        type: "string"
        description: "Creation date"
        readOnly: true
      updatedAt:
        type: "string"
        description: "Last update date"
        readOnly: true
  SecretListResponse:
    type: "object"
    properties:
      totalItems:
        type: "integer"
        format: "int32"
        readOnly: true
      limit:
        type: "integer"
        format: "int32"
        readOnly: true
      skip:
        type: "integer"
        format: "int32"
        readOnly: true
      items:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/Secret"
  SecretUpdates:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Key ID"
      description:
        type: "string"
        description: "Key description"
      groups:
        type: "array"
        description: "Secret groups"
        uniqueItems: true
        items:
          type: "string"
  SignData:
    type: "object"
    required:
    - "data"
    properties:
      paillierKey:
        type: "string"
      data:
        type: "string"
        description: "data"
      dataEncoding:
        type: "string"
        description: "data encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
      params:
        description: "the operation parameters"
        $ref: "#/definitions/AsymmetricCryptoParams"
      doHash:
        type: "boolean"
        description: "do hash or not"
      ecdsaMode:
        type: "string"
        description: "ecdsa sign mode"
        enum:
        - "ECDSA"
        - "SCHNORR"
    description: "Input for sign operation"
  Signature:
    type: "object"
    properties:
      signature:
        type: "string"
        example: "c2Rmc2FkZmFzZGZhIHNkZmFzZGZzIGRmIGFzZGZhIHNkZmFzZGZhc2Q="
        description: "base64 encoded signature"
  SubjectKeyIdentifier:
    type: "object"
    required:
    - "isCritical"
    - "uid"
    properties:
      uid:
        type: "string"
        description: "Extension UID"
      isCritical:
        type: "boolean"
        description: "Is Extension Critical"
      keyId:
        type: "string"
        readOnly: true
    description: "Certificate x509 extension"
  SymmetricCryptoParams:
    type: "object"
    properties:
      mode:
        type: "string"
        description: "Mode of operation"
        enum:
        - "ECB"
        - "CBC"
        - "OFB"
        - "CFB"
        - "CTR"
        - "GCM"
        - "CCM"
        - "XTS"
        - "SIV"
        - "NISTWRAP"
      iv:
        description: "Externally provided IV, default encoded in BASE64. Must be no\
          \ more than 15 bytes."
        $ref: "#/definitions/Iv"
      aad:
        description: "Authentication data, default encoding is PLAIN"
        $ref: "#/definitions/Aad"
      tagLength:
        type: "integer"
        format: "int32"
        example: 16
        description: "For CCM, the value must be between 4 and 16, inclusive, and\
          \ must be even. For other algorithms, the value must be between 1 and 16,\
          \ inclusive."
  SystemCertificate:
    type: "object"
    required:
    - "id"
    - "isCa"
    - "isSelfSigned"
    - "issuer"
    - "pkInfo"
    - "serial"
    - "sha1Thumbprint"
    - "signature"
    - "signatureAlgorithm"
    - "subject"
    - "uid"
    - "validFrom"
    - "validUntil"
    - "version"
    properties:
      id:
        type: "string"
        example: "my-certificate"
        description: "Certificate identifier label"
      role:
        type: "string"
        description: "The server certificate role (EP, PARTNER, AUXILIARY, ROOT_CA)"
        readOnly: true
        enum:
        - "ROOT_CA"
        - "ENTRYPOINT"
        - "PARTNER"
        - "AUXILIARY"
      subject:
        type: "string"
      validUntil:
        type: "string"
        description: "Date of of validity period end for this certificate"
      subjectAlternativeNames:
        description: "Subject Alternative Names Extension"
        $ref: "#/definitions/AlternativeNames"
      version:
        type: "string"
        example: "V3"
        description: "Certificate version"
      alertLevel:
        type: "string"
        readOnly: true
        enum:
        - "WARN"
      uid:
        type: "string"
      serial:
        type: "string"
        example: "185fb61e97f55b19"
        description: "Certificate serial number"
      signatureAlgorithm:
        type: "string"
        example: "sha256RSA"
        description: "Signing algorithm used for signing this certificate"
      issuer:
        type: "string"
        description: "The CA that signed this certificate"
      validFrom:
        type: "string"
        description: "Date of of validity period start for this certificate"
      pkInfo:
        $ref: "#/definitions/PKInfoType"
      basicConstraints:
        description: "Basic Constraints Extension"
        $ref: "#/definitions/BasicConstraints"
      subjectKeyIdentifier:
        description: "Subject Key Identifier Extension"
        $ref: "#/definitions/SubjectKeyIdentifier"
      authorityKeyIdentifier:
        description: "Authority Key Identifier Extension"
        $ref: "#/definitions/AuthorityKeyIdentifier"
      issuerAlternativeNames:
        description: "Issuer Alternative Names Extension"
        $ref: "#/definitions/AlternativeNames"
      extendedKeyUsage:
        description: "Extended Key Usage Extension"
        $ref: "#/definitions/ExtendedKeyUsage"
      sha1Thumbprint:
        type: "string"
        description: "certificate sha1"
      signature:
        type: "string"
        description: "CA signature value for this certificate"
      isCa:
        type: "boolean"
        description: "Determines if this certificate is a CA certificate"
      isSelfSigned:
        type: "boolean"
        description: "Determines if this certificate is a self signed certificate"
    description: "Certificate public information"
  SystemInfo:
    type: "object"
    properties:
      version:
        type: "string"
        example: "2.0.1"
        description: "UKC server version"
        readOnly: true
      lastActivityAt:
        type: "string"
        readOnly: true
      allowedOperations:
        type: "array"
        example: "{Create,Destroy,Sign,...}"
        description: "A list of operation ID's that represent the operations that\
          \ the current user is allowed to use. Should match the operation ID's as\
          \ specified in this document"
        readOnly: true
        items:
          type: "string"
      allowedPartitions:
        type: "array"
        example: "{part1, part2, ...}"
        description: "the partitions on which the user can contact them"
        readOnly: true
        items:
          type: "string"
      alerts:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/AlertsSummary"
    description: "Include information on UKC server"
  UnSealData:
    type: "object"
    required:
    - "cipher"
    properties:
      cipher:
        description: "cipher to decrypt"
        $ref: "#/definitions/SealedCipher"
      outputEncoding:
        type: "string"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
  UnwrapData:
    type: "object"
    required:
    - "keyData"
    - "newGeneratedKey"
    properties:
      newGeneratedKey:
        $ref: "#/definitions/NewGeneratedKey"
      aSymmetricParams:
        description: "Asymmetric cryptographic parameters for symmetric keys"
        $ref: "#/definitions/AsymmetricCryptoParams"
      symmetricParams:
        description: "Symmetric cryptographic parameters for symmetric keys"
        $ref: "#/definitions/SymmetricCryptoParams"
      keyData:
        type: "string"
        description: "optional key data to import"
        minLength: 1
    description: "Input for unwrap operation"
  UpdatedSecret:
    type: "object"
    required:
    - "data"
    properties:
      data:
        type: "string"
        example: "My secret data"
        description: "The data to keep as secret"
        minLength: 1
  VerifyData:
    type: "object"
    required:
    - "data"
    - "signature"
    properties:
      data:
        type: "string"
        description: "data"
      dataEncoding:
        type: "string"
        description: "data encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
      params:
        description: "the operation parameters"
        $ref: "#/definitions/AsymmetricCryptoParams"
      doHash:
        type: "boolean"
        description: "do hash or not"
      signature:
        description: "Signature, encoded as BASE64"
        $ref: "#/definitions/Signature"
    description: "Includes data used for signature verification"
  WrapData:
    type: "object"
    required:
    - "wrappedKeyId"
    properties:
      aSymmetricParams:
        description: "Asymmetric cryptographic parameters for symmetric keys"
        $ref: "#/definitions/AsymmetricCryptoParams"
      symmetricParams:
        description: "Symmetric cryptographic parameters for symmetric keys"
        $ref: "#/definitions/SymmetricCryptoParams"
      wrappedKeyId:
        type: "string"
        description: "ID of the wrapped key"
    description: "Input for the Wrap operation"
