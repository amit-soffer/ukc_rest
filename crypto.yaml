---
swagger: "2.0"
info:
  description: "The UKC Crypto API provides cryptographic services used with Keys\
    \ managed by UKC\n\n# Authentication\nMost UKC API operations require an authorization\
    \ context and user permissions. Users are identified by an authentication token\
    \ attached to the request headers.\n## Certificate Authentication\nDepending on\
    \ UKC server setup, a request to the API may require a client certificate. \
    The certificate identifies the server or application connecting with\
    \ the UKC server. In UKC terms, this server is denoted as the UKC Client.\n\nSuch certificates\
    \ can be generated using the UKC CLI or UI tools, as well as by the Administration\
    \ API.\n\nRefer to the *UKC Users Guide* for further details on configuring\
    \ client certificate.\n## Basic Authentication\n\
    \ UKC also supports user authentication with the *Basic*\
    \ authentication scheme. The *Basic* HTTP authentication scheme is defined in\
    \ RFC 7617, which transmits credentials as user/password pairs, encoded using\
    \ base64 in the HTTP authorization header.\nThe user ID can include the required\
    \ partition in the format `username@partitionId:password`.\nThe user partition can\
    \ be excluded from the credentials if a client certificate is used. In such a case,\
    \ the partition is set by the partition that the client is registered with.\n## Authentication\
    \ Failure (unauthorized)\nIn case an operation is unauthorized, the status code HTTP 401 \
    \ will be returned with the `WWW-Authenticate` header.\n# Partitioning\n\
    UKC objects are organized into partitions. Partitioning allows namespacing and\
    \ access control to objects by configuring users with roles per partition.\n\nThe\
    \ objects contained in a partition are: Users, Clients, Keys, Certificates, and\
    \ Secrets\n## Permissions\nPartitions have the following properties:\n- Any partition can have many users who can access\
    \ its objects.\n- A partition user can have one of two security roles:\n  - \
    \ Security Officer (\"so\") - Can perform all operations on the partition objects including\
    \ administration tasks, such as adding, modifying and deleting objects.\n  - User - Can only\
    \ perform cryptographic operations with the partition objects, such as sign and\
    \ verify, and also edit keys, certificates, and secrets.\n## Root Partition\n\
    The default built-in partition for an UKC cluster is called `root` and is created\
    \ automatically when setting up a new UKC cluster. The `root` partition contains\
    \ all other partitions.\n## Partition Hierarchy\n- __Parent partition__\n  Any\
    \ partition _except_ the root partition has the root partition as its parent partition.\n\
    - __Permission inheritance__\nRoot access permissions can be configured to\
    \ be _inherited_ from the root partition. For example, a user `rootSO` which\
    \ is an SO on the `root` partition, would also have SO permissions on `partitionA`\
    \ if `partitionA` is configured to inherit permissions from `root`.\n  __Note:__\
    \ By default, access permissions are not inherited from the root partition. \
    \ To use permission inheritance, it should be configured explicitly.\n##\
    \ Default Partition Context\nFor every request the _default partition_ is\
    \ the home partition of the connected user.\nFor example:\n  - `so@root` - the\
    \ default partition is the root partition.\n  - `so@partitionA` - the default\
    \ partition is partitionA.\n\nIf a user of the root partition is executing\
    \ an operation on an inherited partition, the partition context should be set\
    \ using the query parameter *partition*, which is availble for all relevant requests.\n\
    # Object IDs\nMany operations require an object ID as part of the resource URI.\
    \ Objects IDs can be one of an object __UUID__ where applicable, which is a\
    \ server generated ID that is unique per object type.\n__Note__: Objects of\
    \ different types can have the same UUID. For example, a user and a key, which is\
    \ due to the fact that UUID's are unique only per object type.\n# Quorum\nThe UKC\
    \ can be configured to require quorum approval for certain operations. If\
    \ the operation you are executing requires quorum approval, the HTTP result is 202 (ACCEPTED)\
    \ and a quorum job object.\n\nUse the Jobs API in order to manage approvals for\
    \ different jobs.\n# Common Errors\nAny API call can result in one of the following\
    \ general HTTP codes:\n- 500 - General server error.\n- 404 - Resource not found.\
    \ Verify that the URL exists.\n- 401 - Unauthorized."
  version: "1.0.0"
  title: "UKC Crypto API"
  termsOfService: ""
  contact: 
    name: "UKC Crypto API"
tags:
- name: "Keys"
schemes:
- "https"
paths:
  /api/v1/keys:
    get:
      tags:
      - "Keys"
      summary: "List key objects"
      description: "Return a list of keys"
      operationId: "listKeys"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "type"
        in: "query"
        description: "Key type"
        required: false
        type: "string"
        enum:
        - "RSA"
        - "ECC"
        - "AES"
        - "TDES"
        - "HMAC"
      - name: "exportable"
        in: "query"
        description: "Is exportable"
        required: false
        type: "boolean"
      - name: "trusted"
        in: "query"
        description: "Is Trusted"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/KeyInfo"
      security:
      - basicAuth: []
    post:
      tags:
      - "Keys"
      summary: "Import a new key"
      description: "Import a new key from a key file"
      operationId: "importKey"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "partition ID"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "key file"
        required: true
        type: "file"
      - name: "id"
        in: "formData"
        description: "key ID"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "password for the file if required"
        required: false
        type: "string"
      - name: "description"
        in: "formData"
        description: "key description"
        required: false
        type: "string"
      - name: "usage"
        in: "formData"
        description: "key usage"
        required: false
        type: "string"
      - name: "keyOnly"
        in: "formData"
        description: "import only key (no chain)"
        required: false
        type: "boolean"
      - name: "testMode"
        in: "formData"
        description: "get key info without importing"
        required: false
        type: "boolean"
      responses:
        201:
          description: "Key generated successfully"
          schema:
            $ref: "#/definitions/KeyInfo"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
        409:
          description: "Object already exist"
      security:
      - basicAuth: []
  /api/v1/keys/generate:
    post:
      tags:
      - "Keys"
      summary: "Generate a new key"
      description: "Generate a new key based on provided parameters"
      operationId: "generateKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - in: "body"
        name: "body"
        description: "The new key"
        required: false
        schema:
          $ref: "#/definitions/NewGeneratedKey"
      responses:
        201:
          description: "Key generated successfully"
        409:
          description: "Object already exists"
      security:
      - basicAuth: []
  /api/v1/keys/{keyId}:
    get:
      tags:
      - "Keys"
      summary: "Get key"
      description: "Return public details of an asymmetric key or exportable symmetric\
        \ key"
      operationId: "getKey"
      produces:
      - "application/json"
      parameters:
      - name: "keyId"
        in: "path"
        description: "Key ID to look for"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "obfuscate"
        in: "query"
        description: "Add obfuscated private key as part of encoded data, which is relevant\
          \ for PKI keys only"
        required: false
        type: "boolean"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Key"
      security:
      - basicAuth: []
    delete:
      tags:
      - "Keys"
      summary: "Delete a key"
      description: "Delete provided key"
      operationId: "deleteKey"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: true
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key ID to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
        202:
          description: "ACCEPTED"
          schema:
            $ref: "#/definitions/Job"
      security:
      - basicAuth: []
  /api/v1/keys/{keyId}/decrypt:
    post:
      tags:
      - "Keys"
      summary: "Decrypt a value using a key"
      description: "Decryption is done using the key. It supports the same parameters as the encryption\
        \ API"
      operationId: "decryptWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "The key used for decryption"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data to decrypt"
        required: false
        schema:
          $ref: "#/definitions/DecryptData"
      responses:
        200:
          description: "OK. Returns  encoded clear text according to request parameters"
          schema:
            $ref: "#/definitions/ClearText"
        400:
          description: "Authentication encryption failure"
      security:
      - basicAuth: []
  /api/v1/keys/{keyId}/decryptx:
    post:
      tags:
      - "Keys"
      summary: "Decrypt multiple values using a key"
      description: "Decryption is done using the key. It supports the same parameters as the encryption API."
      operationId: "multiDecryptWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "The key used for decryption"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data to decrypt"
        required: false
        schema:
          $ref: "#/definitions/Decryptx"
      responses:
        200:
          description: "Array of decrypted values with the requested encoding"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ClearText"
        400:
          description: "Authentication encryption failure"
      security:
      - basicAuth: []
  /api/v1/keys/{keyId}/encrypt:
    post:
      tags:
      - "Keys"
      summary: "Encrypt clear text into cipher text with an existing key"
      description: "Encryption is done using the key. Parameters allow for selection of the padding\
        \ mode and encryption mode."
      operationId: "encryptWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "ID of the key used for encryption"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data to encrypt"
        required: false
        schema:
          $ref: "#/definitions/EncryptData"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Cipher"
      security:
      - basicAuth: []
  /api/v1/keys/{keyId}/encryptx:
    post:
      tags:
      - "Keys"
      summary: "Encrypt multiple values with an existing key"
      description: "Encryption is done using the key. Parameters allow the selection of the padding\
        \ mode and encryption mode."
      operationId: "multiEncryptWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key used for encryption"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data to encrypt"
        required: false
        schema:
          $ref: "#/definitions/Encryptx"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Cipher"
      security:
      - basicAuth: []
  /api/v1/keys/{keyId}/info:
    get:
      tags:
      - "Keys"
      summary: "Get detailed key information"
      description: ""
      operationId: "getKeyInfo"
      produces:
      - "application/json"
      parameters:
      - name: "keyId"
        in: "path"
        description: "Key ID to search for"
        required: true
        type: "string"
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/KeyInfo"
      security:
      - basicAuth: []
  /api/v1/keys/{keyId}/mac:
    post:
      tags:
      - "Keys"
      summary: "Create a Message Authentication Code (MAC) for a message using a\
        \ key"
      description: "Generate MAC for a message. MAC mode is provided as a parameter.\
        \ AES keys support GMAC and CMAC. HMAC keys support HMAC."
      operationId: "createMacWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key used for MAC"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "MAC data"
        required: false
        schema:
          $ref: "#/definitions/MACSignData"
      responses:
        200:
          description: "OK. Returns the generated Message Authentication Code"
          schema:
            $ref: "#/definitions/Mac"
      security:
      - basicAuth: []
  /api/v1/keys/{keyId}/macVerify:
    post:
      tags:
      - "Keys"
      summary: "Verify a Message Authentication Code (MAC) using a key"
      description: "Verifies a MAC value. Supports the same parameters as the MAC\
        \ option."
      operationId: "verifyMacWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key used for verification"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Mac verify data"
        required: false
        schema:
          $ref: "#/definitions/MACVerifyData"
      responses:
        200:
          description: "OK. Verified Successfully"
        400:
          description: "Verification failed"
      security:
      - basicAuth: []
  /api/v1/keys/{keyId}/seal:
    post:
      tags:
      - "Keys"
      summary: "Seal clear text into cipher text with an existing key"
      description: "Sealing can be done for data of any size. The data is both encrypted\
        \ and signed for cipher text integrity."
      operationId: "sealWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "ID of the key used for encryption"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data to seal"
        required: false
        schema:
          $ref: "#/definitions/SealData"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SealedCipher"
      security:
      - basicAuth: []
  /api/v1/keys/{keyId}/sign:
    post:
      tags:
      - "Keys"
      summary: "Sign a message using a key"
      description: "Hash and sign a given message. If requested, it can also assume the\
        \ input is a hash value and just sign it. Different modes are supported as\
        \ parameters."
      operationId: "signWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Key used for signing"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data to sign"
        required: false
        schema:
          $ref: "#/definitions/SignData"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Signature"
      security:
      - basicAuth: []
  /api/v1/keys/{keyId}/unseal:
    post:
      tags:
      - "Keys"
      summary: "Unseal a value using a key"
      description: "Data integrity is verified and data is decrypted"
      operationId: "unSealWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "The key used for decryption"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data to unseal"
        required: false
        schema:
          $ref: "#/definitions/UnSealData"
      responses:
        200:
          description: "OK. Returns encoded clear text according to request parameters"
          schema:
            $ref: "#/definitions/ClearText"
        400:
          description: "Authentication encryption failure"
      security:
      - basicAuth: []
  /api/v1/keys/{keyId}/verify:
    post:
      tags:
      - "Keys"
      summary: "Verify a signature using a key"
      description: "Verifies a signature value. Supports the same parameters as the\
        \ signing option."
      operationId: "verifyWithKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "partitionId"
        in: "query"
        description: "Partition ID"
        required: false
        type: "string"
      - name: "keyId"
        in: "path"
        description: "Certificate used for verification"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data to verify"
        required: false
        schema:
          $ref: "#/definitions/VerifyData"
      responses:
        200:
          description: "OK. Signature verified successfully"
        400:
          description: "Verification failed"
      security:
      - basicAuth: []
securityDefinitions:
  basicAuth:
    type: "basic"
definitions:
  Aad:
    type: "object"
    required:
    - "value"
    properties:
      value:
        type: "string"
        description: "Authentication data"
      encoding:
        type: "string"
        description: "Authentication data encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
  AsymmetricCryptoParams:
    type: "object"
    properties:
      padding:
        description: "The padding information"
        $ref: "#/definitions/Padding"
      hash:
        type: "string"
        description: "The hash type"
        enum:
        - "SHA1"
        - "SHA256"
        - "SHA384"
        - "SHA512"
  Cipher:
    type: "object"
    required:
    - "cipherTextBase64"
    properties:
      cipherTextBase64:
        type: "string"
        description: "base64 encoded encrypted data"
        minLength: 1
      ivBase64:
        type: "string"
        description: "base64 encoded initialization vector"
    description: "Includes encrypted data"
  ClearText:
    type: "object"
    properties:
      clearText:
        type: "string"
  DecryptData:
    type: "object"
    required:
    - "cipher"
    properties:
      aSymmetricParams:
        description: "Asymmetric cryptographic parameters for asymmetric keys"
        $ref: "#/definitions/AsymmetricCryptoParams"
      symmetricParams:
        description: "Symmetric cryptographic parameters for symmetric keys"
        $ref: "#/definitions/SymmetricCryptoParams"
      cipher:
        description: "The cipher to decrypt"
        $ref: "#/definitions/Cipher"
      outputEncoding:
        type: "string"
        description: "The decrypted result encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
    description: "Input for a decrypt operation"
  Decryptx:
    type: "object"
    required:
    - "encrypted"
    properties:
      encrypted:
        type: "array"
        items:
          $ref: "#/definitions/Cipher"
      params:
        $ref: "#/definitions/SymmetricCryptoParams"
      outputEncoding:
        type: "string"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
    description: "Input for multi-decrypt operation"
  ECCKeyInfoType:
    type: "object"
    required:
    - "curve"
    - "ecPoint"
    properties:
      curve:
        type: "string"
        enum:
        - "P256"
        - "P384"
        - "P521"
        - "SECP_256K_1"
      ecPoint:
        type: "string"
        description: "Encoded public key (EC point)"
    description: "Details of ECC public key"
  EncryptData:
    type: "object"
    required:
    - "clearText"
    properties:
      aSymmetricParams:
        description: "Asymmetric cryptographic parameters for asymmetric keys"
        $ref: "#/definitions/AsymmetricCryptoParams"
      symmetricParams:
        description: "Symmetric cryptographic parameters for symmetric keys"
        $ref: "#/definitions/SymmetricCryptoParams"
      clearText:
        type: "string"
        description: "data to encrypt"
        minLength: 1
      dataEncoding:
        type: "string"
        description: "the input data encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
    description: "Input for encryption"
  Encryptx:
    type: "object"
    required:
    - "clearTextItems"
    properties:
      clearTextItems:
        type: "array"
        description: "Array of clear text items to encrypt"
        items:
          type: "string"
      dataEncoding:
        type: "string"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
      params:
        $ref: "#/definitions/SymmetricCryptoParams"
    description: "Input for encryption of multiple values"
  Iv:
    type: "object"
    required:
    - "value"
    properties:
      value:
        type: "string"
        description: "Externally provided IV"
      encoding:
        type: "string"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
  Job:
    type: "object"
    properties:
      initiator:
        type: "string"
        example: "so@root"
        readOnly: true
      id:
        type: "string"
        example: "389323ee-3588-416e-94bd-f93ca815762e"
        readOnly: true
      title:
        type: "string"
        readOnly: true
      opName:
        type: "string"
        example: "PARTITION_CONFIG_SET "
        readOnly: true
      createdAt:
        type: "string"
        readOnly: true
      expiresAt:
        type: "string"
        readOnly: true
      opParams:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/KeyValueEntry"
      response:
        type: "string"
        readOnly: true
      approvedBy:
        type: "array"
        readOnly: true
        items:
          type: "string"
      status:
        type: "string"
        readOnly: true
        enum:
        - "PENDING_APPROVAL"
        - "PENDING_EXECUTION"
        - "DONE"
        - "EXPIRED"
      totalRequiredApprovals:
        type: "integer"
        format: "int32"
        readOnly: true
    description: "An asynchrounous job"
  Key:
    type: "object"
    properties:
      keyData:
        type: "string"
        description: "base64 encoded key data"
  KeyFormat:
    type: "object"
    required:
    - "size"
    - "type"
    properties:
      type:
        type: "string"
        description: "key type"
        enum:
        - "RSA"
        - "ECC"
        - "AES"
        - "TDES"
        - "HMAC"
      size:
        type: "integer"
        format: "int32"
        example: "for RSA : {2048,3072,4094}"
        description: "key size"
      curve:
        type: "string"
        description: "required for ecliptic curve"
        enum:
        - "P256"
        - "P384"
        - "P521"
        - "SECP_256K_1"
  KeyInfo:
    type: "object"
    properties:
      id:
        type: "string"
        example: "my-key"
        description: "key identifier label"
        readOnly: true
      uid:
        type: "string"
        example: "0x00d78d6a396072e9a0"
        description: "key identifier"
        readOnly: true
      keyType:
        type: "string"
        description: "key type"
        readOnly: true
        enum:
        - "RSA"
        - "ECC"
        - "AES"
        - "TDES"
        - "HMAC"
      keySize:
        type: "integer"
        format: "int32"
        description: "key size"
        readOnly: true
      supportedOperations:
        type: "array"
        description: "key supported operations"
        readOnly: true
        items:
          type: "string"
          enum:
          - "SIGN"
          - "VERIFY"
          - "ENCRYPT"
          - "DECRYPT"
          - "WRAP"
          - "UNWRAP"
          - "DERIVE"
      local:
        type: "boolean"
        description: "Was this key created inside EKM or imported?"
        readOnly: true
      hasCertificate:
        type: "boolean"
        description: "Does this key have a matching certificate in UKC?"
        readOnly: true
      prev:
        type: "string"
        description: "Does the key have a previous key (created by renew operation)?"
        readOnly: true
      pkInfo:
        description: "private key (RSA/ECC) information"
        readOnly: true
        $ref: "#/definitions/PKInfoType"
    description: "Key object details"
  KeyProperties:
    type: "object"
    properties:
      supportedOperations:
        type: "array"
        description: "The key supported operations"
        items:
          type: "string"
          enum:
          - "SIGN"
          - "VERIFY"
          - "ENCRYPT"
          - "DECRYPT"
          - "WRAP"
          - "UNWRAP"
          - "DERIVE"
      description:
        type: "string"
        description: "Description for the key"
      isExportable:
        type: "boolean"
        description: "Is the key is exportable?"
  KeyValueEntry:
    type: "object"
    required:
    - "key"
    - "value"
    properties:
      key:
        type: "string"
        minLength: 1
      value:
        type: "string"
    description: "Key value entry"
  Label:
    type: "object"
    required:
    - "value"
    properties:
      value:
        type: "string"
      encoding:
        type: "string"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
  MACSignData:
    type: "object"
    required:
    - "data"
    properties:
      data:
        type: "string"
        description: "data"
        minLength: 1
      dataEncoding:
        type: "string"
        description: "data encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
      params:
        $ref: "#/definitions/MacCryptoParams"
    description: "Input for MAC operation"
  MACVerifyData:
    type: "object"
    required:
    - "data"
    - "mac"
    properties:
      data:
        type: "string"
        description: "data"
        minLength: 1
      dataEncoding:
        type: "string"
        description: "data encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
      params:
        $ref: "#/definitions/MacCryptoParams"
      mac:
        description: "MAC value to be verified, encoded as BASE64"
        $ref: "#/definitions/Mac"
    description: "Includes data used for MAC verification"
  Mac:
    type: "object"
    properties:
      macBase64:
        type: "string"
        example: "c2Rmc2FkZmFzZGZhIHNkZmFzZGZzMjM0MjM0MzQyIGRmIGFzZGZhIDMz"
        description: "base64 encoded MAC value"
      ivBase64:
        type: "string"
        description: "base64 encoded initialization vector"
  MacCryptoParams:
    type: "object"
    properties:
      mode:
        type: "string"
        description: "Mode of operation"
        enum:
        - "GMAC"
        - "CMAC"
        - "HMAC"
      iv:
        description: "Externally provided IV, default encoded in base64"
        $ref: "#/definitions/Iv"
      tagLength:
        type: "integer"
        format: "int32"
  NewGeneratedKey:
    type: "object"
    required:
    - "keyFormat"
    - "keyId"
    properties:
      keyId:
        type: "string"
        description: "An ID for the new key"
        minLength: 1
      keyFormat:
        $ref: "#/definitions/KeyFormat"
      keyProperties:
        $ref: "#/definitions/KeyProperties"
  OAEPPadding:
    type: "object"
    properties:
      mgf:
        type: "string"
        enum:
        - "SHA1"
        - "SHA256"
        - "SHA384"
        - "SHA512"
      label:
        description: "OAEP label, default encoding as PLAIN"
        $ref: "#/definitions/Label"
    description: "OAEP padding parameters"
  PKInfoType:
    type: "object"
    properties:
      rsa:
        $ref: "#/definitions/RSAKeyInfoType"
      ecc:
        $ref: "#/definitions/ECCKeyInfoType"
    description: "Properties of the PKI key"
  PSSPadding:
    type: "object"
    properties:
      mgf:
        type: "string"
        description: "The MGF hash algorithm"
        enum:
        - "SHA1"
        - "SHA256"
        - "SHA384"
        - "SHA512"
      saltSize:
        type: "integer"
        format: "int32"
        description: "the salt size"
    description: "PSS padding parameters"
  Padding:
    type: "object"
    required:
    - "type"
    properties:
      type:
        type: "string"
        enum:
        - "PKCS1"
        - "OAEP"
        - "PSS"
      pss:
        $ref: "#/definitions/PSSPadding"
      oaep:
        $ref: "#/definitions/OAEPPadding"
    description: "Crypto operation padding type"
  RSAKeyInfoType:
    type: "object"
    required:
    - "modulus"
    - "publicExponent"
    properties:
      publicExponent:
        type: "string"
        description: "HEX encoded exponent"
      modulus:
        type: "string"
        description: "HEX encoded modulus"
    description: "Details of RSA public key"
  SealData:
    type: "object"
    required:
    - "clearText"
    properties:
      clearText:
        type: "string"
        description: "Data to seal"
        minLength: 1
      dataEncoding:
        type: "string"
        description: "the data encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
  SealedCipher:
    type: "object"
    required:
    - "value"
    properties:
      value:
        type: "string"
        description: "base64 encoded sealed value"
        minLength: 1
  SignData:
    type: "object"
    required:
    - "data"
    properties:
      data:
        type: "string"
        description: "data"
      dataEncoding:
        type: "string"
        description: "data encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
      params:
        description: "the operation parameters"
        $ref: "#/definitions/AsymmetricCryptoParams"
      doHash:
        type: "boolean"
        description: "do hash or not"
    description: "Input for sign operation"
  Signature:
    type: "object"
    properties:
      signature:
        type: "string"
        example: "c2Rmc2FkZmFzZGZhIHNkZmFzZGZzIGRmIGFzZGZhIHNkZmFzZGZhc2Q="
        description: "base64 encoded signature"
  SymmetricCryptoParams:
    type: "object"
    properties:
      mode:
        type: "string"
        description: "Mode of operation"
        enum:
        - "ECB"
        - "CBC"
        - "OFB"
        - "CFB"
        - "CTR"
        - "GCM"
        - "CCM"
        - "XTS"
        - "SIV"
        - "NISTWRAP"
      iv:
        description: "Externally provided IV, default encoded in base64"
        $ref: "#/definitions/Iv"
      aad:
        description: "Authentication data, default encoded in PLAIN"
        $ref: "#/definitions/Aad"
      tagLength:
        type: "integer"
        format: "int32"
  UnSealData:
    type: "object"
    required:
    - "cipher"
    properties:
      cipher:
        description: "cipher to decrypt"
        $ref: "#/definitions/SealedCipher"
      outputEncoding:
        type: "string"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
  VerifyData:
    type: "object"
    required:
    - "data"
    - "signature"
    properties:
      data:
        type: "string"
        description: "data"
      dataEncoding:
        type: "string"
        description: "data encoding"
        enum:
        - "PLAIN"
        - "BASE64"
        - "HEX"
      params:
        description: "the operation parameters"
        $ref: "#/definitions/AsymmetricCryptoParams"
      doHash:
        type: "boolean"
        description: "Do hash or not"
      signature:
        description: "Signature, encoded as BAS64"
        $ref: "#/definitions/Signature"
    description: "Includes data used for signature verification"
# Added by API Auto Mocking Plugin
host: ukcep.your_domain
basePath: /api/v1
